<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-09-07T08:12:48-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a Node.js API in Under 30 Minutes]]></title>
    <link href="http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes/"/>
    <updated>2017-08-11T16:50:51-07:00</updated>
    <id>http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes</id>
    <content type="html"><![CDATA[<p>Node.js can be intimidating to beginners. But its flexible structure and lack of
strict guidelines makes it seem more complicated than it is.</p>

<p>This tutorial is a quick and simple guide to Node.js, the Express framework, and
MongoDB, focusing on the fundamental REST routes and basic database interaction.
You’ll build a simple API boilerplate that can then be used as the foundation
for any app.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*s5LVdcugM62xzSvGUpTLWA.png" alt="" /></p>

<!--more-->


<p><strong>Who This Tutorial Is For</strong>: You should have a basic understanding of REST APIs
and CRUD operations, plus basic JavaScript knowledge. I use ES6 (mainly
fat-arrow functions), but nothing too complex.</p>

<p>For this tutorial, you’ll create the skeleton of a back-end for a note-taking
application — think <a href="http://keep.google.com/">Google Keep</a>. You want to be able
to do all four CRUD actions on your notes: create, read, update, and delete.</p>

<h3>Setting Up</h3>

<p>If you don’t have Node installed, <a href="https://howtonode.org/how-to-install-nodejs">see
here</a>.</p>

<p>In a new directory, run npm init, and follow along with the prompts, giving your
app the name of ‘notable’ (or whatever else you might like).
<code>
    npm init
</code>
Once that’s done, you should have a <em>package.json </em>ready to go in your
directory. This means you can start installing the dependencies you need for
your project.</p>

<p>You’re going to use Express as your framework, MongoDB as the database, and a
package called body-parser to help deal with JSON requests.
<code>
npm install --save express mongodb body-parser
</code>
I also highly recommend installing Nodemon as a dev dependency. It’s a simple
little package that automatically restarts your server when files change.</p>

<p>If you run:
<code>
npm install --save-dev nodemon
</code></p>

<p>You can then add the following script to <em>package.json</em>:
``` javascript
    // package.json</p>

<pre><code>  "scripts": {
    "dev": "nodemon server.js"
  },
</code></pre>

<pre><code>Your complete *package.json* should look like this:
</code></pre>

<pre><code>// package.json

{
  "name": "notable",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "dev": "nodemon server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.15.2",
    "express": "^4.14.0",
    "mongodb": "^2.2.16"
  },
  "devDependencies": {
    "nodemon": "^1.11.0"
  }
}
</code></pre>

<pre><code>Now you can create your *server.js *file* *and start building your API.

### Our Server

Let’s start by requiring all your dependencies in *server.js.*
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();
</code></pre>

<pre><code>You’re going to use the MongoClient to interact with your database. Note that
you also initialize your app as an instance of Express, your framework.

The last thing you need to do to get your server up and running is to tell your
app to start *listening *for HTTP requests.

You can specify a port, and start the listening like so:
</code></pre>

<pre><code>// server.js

const port = 8000;

app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Now if you run *npm run dev *(or *node server.js* if you didn’t install Nodemon)
you should see ‘We are live on port 8000’ in the terminal.

Your server is live. But it doesn’t do a whole lot. Or anything, really.

Let’s fix that.

### CRUDdy Routes

For this example, you want to build 4 routes; to CREATE a note, to READ your
notes, to UPDATE a note, and to DELETE a note.

This will give you a good idea of how to structure almost any basic route with
Node.

To test your API, though, you need to mimic a client side making requests. To do
so, you’ll use a great app called [Postman](https://www.getpostman.com/). It
allows you to make simple HTTP requests with custom bodies and parameters.

Install Postman, and let’s start setting up your routes.

### Super Organized

Most Node.js tutorials (and many real apps) put all their routes in one big
*routes.js *file. This makes me a wee bit uncomfortable.In contrast, splitting
up your files into separate folders leads to good readability, and makes big
apps more manageable.

You don’t have a big app, but let’s do this right. Make the following
directories: an *app* folder with a routes folder inside it, with an *index.js
*and a* note_routes.js *file inside it.

In other words: root &gt; app &gt; routes &gt; index.js and note_routes.js.
</code></pre>

<pre><code>mkdir app
cd app
mkdir routes
cd routes
touch index.js
touch note_routes.js
</code></pre>

<pre><code>These directories may seem like overkill for your simple small app, but it’s
always good to start with best practices.

### Your First Route

Let’s start with the C in CRUD- create. How would you create a note?

Well, before you do that, you have to build a bit more infrastructure. In
Express, routes are wrapped in a function, which takes the Express instance and
a database as arguments.

Like this:
</code></pre>

<pre><code>// routes/note_routes.js

module.exports = function(app, db) {

};
</code></pre>

<pre><code>You can then export this function through your* index.js*:
</code></pre>

<pre><code>// routes/index.js

const noteRoutes = require('./note_routes');

module.exports = function(app, db) {
  noteRoutes(app, db);
  // Other route groups could go here, in the future
};
</code></pre>

<pre><code>Then import it for use in *server.js:*
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;

app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Note that since you don’t have a database yet set up, you’re just passing in an
empty object.

Okay, *now* you can make your CREATE route.

The syntax is simple:
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
};
</code></pre>

<pre><code>When the app receives a *post *request to the ‘/notes’ path, it will execute the
code inside the callback- passing in a request object (which contains the
parameters or JSON of the request) and a response object (used to reply).

You can test this by using Postman to send a POST request to
localhost:8000/notes.

![](https://cdn-images-1.medium.com/max/800/1*pqIRP6BQSrVCCc6XVPZxPg.png)
You should get the ‘Hello’ back.

Nice! You created your first real route.

Next step is to add some parameters to your request and process them in your API
and, finally, add in your database.

### Request Parameters

In Postman, go to the Body tab and add some key-value pairs, after selecting the
*x-www-form-urlencoded* radio button.

This will add encoded form data to your request, which you’ll be able to process
with your API.

![](https://cdn-images-1.medium.com/max/800/1*z2mIHYqGFYhSJv0x2_caqg.png)
You can try being more creative than me.

Now in your *note_routes.js*, let’s just log out the body.
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.post('/notes', (req, res) =&gt; {
    res.send('Hello')
  });
};
</code></pre>

<pre><code>Try sending the Postman request and you’ll see… undefined.

Unfortunately, Express can’t process URL encoded forms on its own. But you did
install that body-parser package…
</code></pre>

<pre><code>// server.

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;


require('./app/routes')(app, {});
app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Now you should see the body as an object in the terminal.
</code></pre>

<pre><code>{ title: 'My Note Title', body: 'What a great note.' }
</code></pre>

<pre><code>Last step to your preliminary route: set up the database, and then add your data
in.

The easiest way to set up a Mongo database is through [mLab](https://mlab.com/):
it’s free for the smallest size, and quite fast to setup.

Once you create an account and a MongoDB deployment, add a user to the database
with a username and password:

![](https://cdn-images-1.medium.com/max/800/1*E5ws9QPkraXVwigcdW86nw.png)

then grab the URL here (the second one):

![](https://cdn-images-1.medium.com/max/800/1*kJMlsvyB11W73cO-CioxxA.png)

And in a directory config in the root of your project, create a db.js file.
</code></pre>

<pre><code>mkdir config 
cd config
touch db.js
</code></pre>

<pre><code>Inside, add the URL:
</code></pre>

<pre><code>module.exports = {
  url : YOUR URL HERE
};
</code></pre>

<pre><code>Don’t forget to add your username and password (the ones from the database user,
not your mLab account) into the URL. (If you’re committing this project to
Github, be sure to include a .gitignore file [like
so](https://github.com/scottdomes/notable-node-api-tutorial/blob/master/.gitignore),
so you don’t share your password with everyone.)

Now in your *server.js*, you can use the MongoClient to connect to your DB, and
use this to wrap your app setup:
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;

app.use(bodyParser.urlencoded({ extended: true }));
</code></pre>

<pre><code>

That’s the last of your infrastructure setup! It’s all route-building from here.

### Adding to your Database

MongoDB stores data in *collections*- which are exactly how they sound. In your
case, you want to store your notes in a collection called — you guessed it —
notes.

Since you pass in your database as the *db *argument in your routes, you can
then access it like so:
</code></pre>

<pre><code>db.collection('notes')
</code></pre>

<pre><code>Creating a note is as simple as calling *insert *on your collection:
</code></pre>

<pre><code>const note = { text: req.body.body, title: req.body.title}
  db.collection('notes').insert(note, (err, results) =&gt; {
}
</code></pre>

<pre><code>Once the insert is complete (or has failed for whatever reason), you want to
either send back an error or send back the newly created note object. Here’s the
full *note_routes.js:*
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
    });
  });
};
</code></pre>

<pre><code>Try it out! Send an x-www-form-urlencoded POST request with Postman, with a
*title *and *body *set under the Body tab.

The response should look like this:

![](https://cdn-images-1.medium.com/max/800/1*YcGwoqOpRkQEo-N0W_-WEA.png)

If you log into mLab, you should also see the created note in the database.

### Your READ Route

Now you can pick up the pace a bit.

Say you wanted to get back the note you just created, by navigating to
localhost:8000/notes/{the id}. In this case, that would be
localhost:8000/notes/585182bd42ac5b07a9755ea3.

(If you don’t have the ID for one of your notes, you can check on mLab or just
create a new one).

Here’s what this would look like in *note_routes.js*:
</code></pre>

<pre><code>// note_routes.js

module.exports =
function(app, db) {

  app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>Just like before, you’re going to call a method on your database collection of
notes. Here, it’s the aptly named findOne.
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.get('/notes/:id', (req, res) =&gt; {
  });

app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>You can grab the id from the URL parameters via *req.params.id*. However, if you
try to just plop in the string into the &lt;&gt; above, it won’t work.

MongoDB requires not just an ID as a *string*, but as an ID *object* or, as they
call it, an ObjectID.

Don’t worry, it’s an easy fix. Here’s the full code:
</code></pre>

<pre><code>// note_routes.js


module.exports = function(app, db) {
  app.get('/notes/:id', (req, res) =&gt; {
    db.collection('notes').findOne(details, (err, item) =&gt; {
      if (err) {
        res.send({'error':'An error has occurred'});
      } else {
        res.send(item);
      } 
    });
  });

app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>Try it out with one of your note ID’s, and it should look like this:

### Your DELETE Route

Deleting an object is actually pretty much the same as finding an object. You
just use the *remove* function instead of the *findOne*. Here’s the full code.
I’ve highlighted what’s different from your GET:
</code></pre>

<pre><code>// note_routes.js

// ...

  app.
('/notes/:id', (req, res) =&gt; {
    const id = req.params.id;
    const details = { '_id': new ObjectID(id) };
    db.collection('notes').
(details, (err, item) =&gt; {
      if (err) {
        res.send({'error':'An error has occurred'});
      } else {
      } 
    });
  });

// ...
</code></pre>

<pre><code>### **Your UPDATE Route**

Last one! The PUT is basically a hybrid between READ and CREATE. You find the
object, then update it accordingly. If you deleted your only note, time to make
another one!

The code:
</code></pre>

<pre><code>// note_routes.js

// ...

  app.
('/notes/:id', (req, res) =&gt; {
      if (err) {
          res.send({'error':'An error has occurred'});
      } else {
          res.send(note);
      } 
    });
  });

// ...
</code></pre>

<p>```
Now you can update any of your notes, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*LZ1DzuxzAJAyNYjO4sZcmg.png" alt="" /></p>

<p>Note the imperfection with this code- if you fail to supply a body or title, the
PUT request will nullify those fields on the note in the database.</p>

<p>You could easily add some conditional logic to update the fields only if they’re
present in the request- I left that out just to keep it simple.</p>

<h3>API Complete</h3>

<p>That’s it! You have a working Node API with each of the four major CRUD
operations.</p>

<p>The goal of this tutorial was to give you a degree of familiarity with Express,
Node, and MongoDB — you can use your simple app as a launching pad for more
complex projects.</p>

<p>In the future I’ll be writing tutorials to create more simple API’s in different
languages and frameworks.</p>

<p>If this tutorial was any help to you, please share it with friends and colleagues- it means
a lot. Feel free to also leave me a comment with any feedback or questions.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>

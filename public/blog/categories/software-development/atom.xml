<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Development | Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/blog/categories/software-development/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-09-07T08:11:02-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Our Best Practices for Writing React Components]]></title>
    <link href="http://scottdomes.com/blog/our-best-practices-for-writing-react-components/"/>
    <updated>2017-08-11T16:51:15-07:00</updated>
    <id>http://scottdomes.com/blog/our-best-practices-for-writing-react-components</id>
    <content type="html"><![CDATA[<p>When I first started writing React, I remember seeing many different
approaches to writing components, varying greatly from tutorial to tutorial.
Though the framework has matured considerably since then, there doesn’t seem to
yet be a firm ‘right’ way of doing things.</p>

<p>Over the past year at <a href="https://musefind.com/">MuseFind</a>, our team has written a
lot of React components. We’ve gradually refined our approach until we’re happy
with it.</p>

<p>This guide represents our suggested best practices. We hope it will be useful,
whether you’re a beginner or experienced.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*GEniDHmmO0nkVuKQ8fhLYw.png" alt="" /></p>

<!--more-->


<p>Before we get started, a couple of notes:</p>

<ul>
<li>We use ES6 and ES7 syntax.</li>
<li>If you’re not sure of the distinction between presentational and container
components, we recommend you <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kuvqndiqq">read this
first</a>.</li>
<li>Please let us know in the comments if you have any suggestions, questions, or
feedback.</li>
</ul>


<h3>Class Based Components</h3>

<p>Class based components are stateful and/or contain methods. We try to use them
as sparingly as possible, but they have their place.</p>

<p>Let’s incrementally build our component, line by line.</p>

<h4>Importing CSS</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>I like <a href="https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55">CSS in
JavaScript</a>,
I do — in theory. But it’s still a new idea, and a mature solution hasn’t
emerged. Until then, we import a CSS file to each component.</p>

<p>We also separate our dependency imports from local imports by a newline.</p>

<h4>Initializing State</h4>

<pre><code class="javascript">    import 
    , { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>You can also use the older approach of initializing state in the constructor.
More on that
<a href="http://stackoverflow.com/questions/35662932/react-constructor-es6-vs-es7">here</a>.
We prefer the cleaner way.</p>

<p>We also make sure to export our class as the default.</p>

<h4>propTypes and defaultProps</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
</code></pre>

<p>propTypes and defaultProps are static properties, declared as high as possible
within the component code.They should be immediately visible to other devs
reading the file, since they serve as documentation.</p>

<p>If using React 15.3.0 or higher, use the
<a href="https://github.com/reactjs/prop-types">prop-types</a> package instead of
React.PropTypes — nicely destructured, of course.</p>

<p>All your components should have propTypes.</p>

<h4>Methods</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }

      static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
      }
</code></pre>

<p>With class components, when you pass methods to subcomponents, you have to
ensure that they have the right <em>this** </em>when they’re called.This is usually
achieved by passing <em>this.handleSubmit.bind(this)</em> to the subcomponent.</p>

<p>We think this approach is cleaner and easier, maintaining the correct context
automatically via the ES6 arrowfunction.</p>

<h4><strong>Passing setState a Function</strong></h4>

<p>In the above example, we do this:
<code>javascript
this.setState({ expanded: !this.state.expanded })
</code>
Here’s the dirty secret about setState — it’s actually asynchronous. React
batches state changes for performance reasons, so the state may not change
immediately after setState is called.</p>

<p>That means you should not rely on the current state when calling setState —
since you can’t be sure what that state will be!</p>

<p>Here’s the solution — pass a function to setState, with the previous state as an
argument.</p>

<pre><code class="javascript">this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
</code></pre>

<p>(Thanks to <a href="https://medium.com/@indiesquidge">Austin Wood</a> for his help with
this section).</p>

<h4>Destructuring Props</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
     static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
        title: 'Your Name'
      }

    handleSubmit = (e) =&gt; {
        e.preventDefault()
        this.props.model.save()
      }

      handleNameChange = (e) =&gt; {
        this.props.model.changeName(e.target.value)
      }

      handleExpand = (e) =&gt; {
        e.preventDefault()
        this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
      }

    }
</code></pre>

<p>Components with many props should have each prop on a newline, like above.</p>

<h4>Decorators</h4>

<pre><code>export default class ProfileContainer extends Component {
</code></pre>

<p>If you’re using something like <a href="https://github.com/mobxjs/mobx">mobx</a>, you can
decorate your class components like so — which is the same as passing the
component into a function.</p>

<p><a href="http://javascript.info/tutorial/decorators">Decorators</a> are flexible and
readable way of modifying component functionality.We use them extensively, with
mobx and our own <a href="https://github.com/musefind/mobx-models">mobx-models</a> library.</p>

<p>If you don’t want to use decorators, do the following:</p>

<pre><code class="javascript">    class ProfileContainer extends Component {
      // Component code
    }

    export default observer(ProfileContainer)
</code></pre>

<h4>Closures</h4>

<p>Avoid passing new closures to subcomponents, like so:</p>

<pre><code class="html">              &lt;input
                type="text"
                value={model.name}
                // onChange={(e) =&gt; { model.name = e.target.value }}
                // 

                placeholder="Your Name"/&gt;
</code></pre>

<p>Here’s why: every time the parent component renders, a new function is created
and passed tothe input.</p>

<p>If the input were a React component, this would automatically trigger it to
re-render, regardless of whether its other props have actually changed.</p>

<p>Reconciliation is the most expensivepart of React. Don’t make it harder than it
needs to be! Plus, passing aclass method is easier to read, debug, and change.</p>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/70e436951dfeeb82dfdd4aa6d2541dce.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { string, object } from &#39;prop-types&#39;
// Separate local imports from dependencies
import ExpandableForm from &#39;./ExpandableForm&#39;
import &#39;./styles/ProfileContainer.css&#39;

// Use decorators if needed
@observer
export default class ProfileContainer extends Component {
  state = { expanded: false }
  // Initialize state here (ES7) or in a constructor method (ES6)
 
  // Declare propTypes as static properties as early as possible
  static propTypes = {
    model: object.isRequired,
    title: string
  }

  // Default props below propTypes
  static defaultProps = {
    model: {
      id: 0
    },
    title: &#39;Your Name&#39;
  }

  // Use fat arrow functions for methods to preserve context (this will thus be the component instance)
  handleSubmit = (e) =&gt; {
    e.preventDefault()
    this.props.model.save()
  }
  
  handleNameChange = (e) =&gt; {
    this.props.model.name = e.target.value
  }
  
  handleExpand = (e) =&gt; {
    e.preventDefault()
    this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
  }
  
  render() {
    // Destructure props for readability
    const {
      model,
      title
    } = this.props
    return ( 
      &lt;ExpandableForm 
        onSubmit={this.handleSubmit} 
        expanded={this.state.expanded} 
        onExpand={this.handleExpand}&gt;
        // Newline props if there are more than two
        &lt;div&gt;
          &lt;h1&gt;{title}&lt;/h1&gt;
          &lt;input
            type=&quot;text&quot;
            value={model.name}
            // onChange={(e) =&gt; { model.name = e.target.value }}
            // Avoid creating new closures in the render method- use methods like below
            onChange={this.handleNameChange}
            placeholder=&quot;Your Name&quot;/&gt;
        &lt;/div&gt;
      &lt;/ExpandableForm&gt;
    )
  }
}</code></pre></noscript></div>
</p>

<h3>Functional Components</h3>

<p>These components have no state and no methods.They’re pure, and easy to reason
about. Use them as often as possible.</p>

<h4>propTypes</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool
    }

    // Component declaration
</code></pre>

<p>Here, we assign the propTypes before the component declaration, so they are
immediately visible. We’re able to do this because of JavaScript function
hoisting.</p>

<h4>Destructuring Props and defaultProps</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }
</code></pre>

<p>Our component is a function, which takes its props as its argument. We can
expand them like so:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Note we can also use default arguments to act as defaultProps in a highly
readable manner. If expanded is undefined, we set it to false. (A bit of a
forced example, since it’s a boolean, but very useful for avoiding ‘Cannot read
<property> of undefined’ errors with objects).</p>

<p>Avoid the following ES6 syntax:</p>

<pre><code class="javascript">const ExpandableForm = ({ onExpand, expanded, children }) =&gt; {
</code></pre>

<p>Looks very modern, but the function here is actually unnamed.</p>

<p>This lack of name will not be a problem if your Babel is set up correctly — but
if it’s not, any errors will show up as occurring in &lt;<anonymous>> which is
terrible for debugging.</p>

<p>Unnamed functions can also cause problems with Jest, a React testing library.
Due to the potential for difficult-to-understand bugs (and the lack of real
benefit) we recommend using <em>function </em>instead of<em> const.</em></p>

<h4>Wrapping</h4>

<p>Since you can’t use decorators with functional components, you simply pass it
the function in as an argument:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

    function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/19d4ade69b1a3978730b104558fb5308.js'></script>
<noscript><pre><code>import React from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { func, bool } from &#39;prop-types&#39;
// Separate local imports from dependencies
import &#39;./styles/Form.css&#39;

// Declare propTypes here, before the component (taking advantage of JS function hoisting)
// You want these to be as visible as possible
ExpandableForm.propTypes = {
  onSubmit: func.isRequired,
  expanded: bool,
  onExpand: func.isRequired
}

// Destructure props like so, and use default arguments as a way of setting defaultProps
function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
  const formStyle = expanded ? { height: &#39;auto&#39; } : { height: 0 }
  return (
    &lt;form style={formStyle} onSubmit={onSubmit}&gt;
      {children}
      &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
    &lt;/form&gt;
  )
}

// Wrap the component instead of decorating it
export default observer(ExpandableForm)</code></pre></noscript></div>
</p>

<h3>Conditionals in JSX</h3>

<p>Chances are you’re going to do a lot of conditional rendering. Here’s what you
want to avoid:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*4zdSbYcOXTVchgSJqtk0Ig.png" alt="" />
^ Actual code I wrote in my early days at MuseFind… forgive me</p>

<p>No,nested ternaries are not a good idea.</p>

<p>There are some libraries that solve this problem (<a href="https://github.com/AlexGilleran/jsx-control-statements">JSX-Control
Statements</a>), but rather
than introduce another dependency, we settled on this approach for complex
conditions:</p>

<p>A refactored version of the above:
<img src="https://cdn-images-1.medium.com/max/800/1*IVFlMaSGKqHISJueTC26sw.png" alt="" /></p>

<p>Use curly braces wrapping an
<a href="http://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript">IIFE</a>,
and then put your if statements inside, returning whatever you want to render.
Note that IIFE’s like this can cause a performance hit, but in most cases it
will not be significant enough to warrant losing the readability factor.</p>

<p><strong>Update: </strong>Many commenters have recommended extracting this logic to a
subcomponent that conditionally returns different buttons based on props.They’re
right — splitting up your components as much as possible is always a good call.
But keep the IIFE approach in mind as a fallback for quick conditionals.</p>

<p>Also, when you only want to render an element on one condition, instead of doing
this…</p>

<pre><code class="javascript">    {
      isTrue
       ? &lt;p&gt;True!&lt;/p&gt;
       : &lt;none/&gt;
    }
</code></pre>

<p>… use short-circuit evaluation:</p>

<pre><code class="javascript">{
  isTrue &amp;&amp; 
    &lt;p&gt;True!&lt;/p&gt;
}
</code></pre>

<h3>Conclusion</h3>

<p>Was this article useful? Share it with your friends and fellow devs.</p>

<p>Have any feedback? Leave a comment below.</p>

<p>Thanks for reading!</p>

<p>(Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter—subscribe below.)</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Django API in Under 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes/"/>
    <updated>2017-08-11T16:51:01-07:00</updated>
    <id>http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes</id>
    <content type="html"><![CDATA[<p>Django is by far the most popular Python framework, designed to provide
Rails-like ease of use. Let’s see how quickly we can set up a simple API using
Django and a library called TastyPie.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*cGZQTle3SrxD9STT9LuuMQ.png" alt="" /></p>

<!--more-->


<p>For those of you who read the <a href="https://medium.com/@scottdomes/building-a-simple-node-js-api-in-under-30-minutes-a07ea9e390d2#.mov6a516k">Node API
tutorial</a>,
we’re now going to attempt to do the same thing with Django. We’ll also very
quickly see how Django makes some things harder, and some things much much
easier.</p>

<p><strong>Who This Tutorial Is For</strong>: You should have a basic understanding of REST APIs
and CRUD operations. Python knowledge is a plus but not necessary. You’ll pick
it up.</p>

<p>We’ll be building an API for a Google Keep-esque note-taking web app. We want to
build a REST-ful API with the CRUD endpoints, to create, read, update, and
delete notes. The good news is that rather than approach these endpoints
individually, Django lets us more or less create them all in one fell swoop.</p>

<h3><strong>Setting Up Our Project</strong></h3>

<p>Django divides your work into projects and apps. Projects contain apps, but apps
do not necessarily belong to a certain project — the idea is to make them
reusable across projects.</p>

<p>We’ll only be making one app within one project, but the file structure may seem
a little odd if you don’t keep this in mind.</p>

<p><a href="https://www.python.org/downloads/">Install Python</a> if you haven’t done so, then
let’s install Django and create our project:
<code>
    pip install Django
    django-admin startproject notable_django
    cd notable_django
</code>
Next we’ll install
<a href="https://github.com/django-tastypie/django-tastypie">TastyPie</a>, which will
supply us with a REST framework.
<code>
    pip install django-tastypie
</code>
Finally, we can start our app within our project:
<code>
    python manage.py startapp api
</code>
Within your notable_django directory, you should now have two subfolders: one
also called notable_django, and another named api (as well as a manage.py file).</p>

<p>The distinction between the two can be thought of like this: the notable_django
contains the settings for the configuration of the project, as well as exposing
URLs. The api folder handles the actual API magic.</p>

<p>Before we go on, we have to install our app within our project, inside
notable_django/settings-py:
``` python
    # notable_django/settings.py</p>

<pre><code>INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
</code></pre>

<pre><code>Again, our project can have multiple apps installed — and those apps aren’t
necessarily tied to that project. Our project here is notable_django, and our
app is called api.

With that done, we’re ready to start building.

### A Model Start

The first thing we need to create is a Note model to interact with.

For those unfamiliar with models, [this
description](https://docs.djangoproject.com/en/1.10/topics/db/models/) from the
Django docs is as good as any:

&gt; A model is the single, definitive source of information about your data. It
&gt; contains the essential fields and behaviors of the data you’re storing.
Generally, each model maps to a single database table.

Django is unique (compared to a framework like Ruby on Rails) in that your
migrations follow how you define your models, rather than being separately
defined.

We’re going to create our Note model, and then run our migrations, which will
set up our database with a notes table (with all the appropriate fields).

Let’s create our model, in api/models.py
</code></pre>

<pre><code># api/models.py

class Note(models.Model):
    title = models.CharField(max_length=200)
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
</code></pre>

<pre><code>We define our fields, along with the type of each.

The next thing we want to do is add a __str__ method to the model. This method
defines what we get when we ask for a particular instance of a model.

For example, this:
</code></pre>

<pre><code># api/models.py

class Note(models.Model):
    title = models.CharField(max_length=200)
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

def __str__(self):
        return self.title
</code></pre>

<pre><code>… means that when we grab any Note model, we’ll get back only the title. This
just keeps things clean. (We will only be interacting with our models in this
manner through the Python shell, so it’s not super necessary, but good to be
aware of).

Let’s expand our __str__ method to also include the body:
</code></pre>

<pre><code># api/models.py

class Note(models.Model):
    title = models.CharField(max_length=200)
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

def __str__(self):
        return '%s %s' % (self.title, self.body)
</code></pre>

<pre><code>Okay, our model is all set up. Now to run our migrations, which will set up our
database.
</code></pre>

<pre><code>python manage.py makemigrations
python manage.py migrate
</code></pre>

<pre><code>Let’s go ahead and populate our database with a single note, to make sure all is
well:
</code></pre>

<pre><code>python manage.py shell
&gt;&gt;&gt; from api.models import Note
&gt;&gt;&gt; note = Note(title="First Note", body="This is certainly noteworthy")
&gt;&gt;&gt; note.save()
&gt;&gt;&gt; Note.objects.all()
&lt;QuerySet [&lt;Note: First Note This is certainly noteworthy&gt;]&gt;
&gt;&gt;&gt; exit()
</code></pre>

<pre><code>We create our note, save it, then retrieve all notes. You can see our __str__
method at work, returning both the title and the body.

(If you want to learn more about the Note.objects manager, [see
here](https://docs.djangoproject.com/en/1.10/topics/db/managers/#django.db.models.Manager)).

### API-ification

Okay, so our model and database are all ready to go. Now to expose some
endpoints to the wider world, so we can interact with our data.

One of the basics of RESTful APIs is the idea of resources. The term is rather
abstract, but in this context it refers to a class that sits between our URLs
and our models.

A user will make a request to an endpoint. Depending on the URL, the user will
be redirected to a particular resource, which will then perform the appropriate
CRUD action on the model.

Again, this is a simplified explanation of a complex topic — let’s go ahead and
see it in practice:

In your api folder, create a new file called *resources.py.*
</code></pre>

<pre><code># api/resources.py

from tastypie.resources import ModelResource
from api.models import Note

class NoteResource(ModelResource):
    class Meta:
        queryset = Note.objects.all()
        resource_name = 'note'
</code></pre>

<pre><code>We import our model, and create a resource from it. The *queryset* (what models
the resource is concerned with) is all note objects.

We also name the resource appropriately: ‘note’. This will be important for
URLs.

Speaking of which, let’s set those up in our notable_django/urls.py file:
</code></pre>

<pre><code>from django.conf.urls import url
from django.contrib import admin


urlpatterns = [
    url(r'^admin/', admin.site.urls),
]
</code></pre>

<pre><code>We import our NoteResource, instantiate it, and then say that we want all URLs
that start with api/ to redirect to the resource. (Don’t forget to import
*include *from django.conf.urls).

### Testing Our API

Finally, we can get running. As in the Node tutorial, we’re going to use Postman
to make API requests. You can get it [here](https://www.getpostman.com/).
</code></pre>

<pre><code>python manage.py runserver
</code></pre>

<pre><code>Now in Postman, let’s send a GET request to this URL:
[http://localhost:8000/api/note/1](http://localhost:8000/api/note/1)

![](https://cdn-images-1.medium.com/max/800/1*8Paypbwf_k8z-csMl2xpVw.png)

Great! Our GET endpoint is working perfectly. Easy.

Now let’s try to create a new note from Postman.

### POST, PUT, DELETE

We’re going to send a raw JSON object as our new note, like so:

![](https://cdn-images-1.medium.com/max/800/1*bbtveT-w_9ji_nfjz9-pMA.png)

Make sure you select JSON from the orange dropdown there! This will set a
Content-Type header (which you can view under the Headers tab).

Also make sure you send the request to
[http://localhost:8000/api/note](http://localhost:8000/api/note/1)/, not
[http://localhost:8000/api/note](http://localhost:8000/api/note/1). That
trailing slash is important, since otherwise Django has to redirect you, losing
the POST data.

Send that request and… it fails. We get back a 401, AKA Unauthorized.

TastyPie is protective of its models out of the box, and only allows reading,
not modifying, the data.

It’s an easy fix, though — import their basic Authorization class, and add it to
our resource.
</code></pre>

<pre><code># api/resources.py

from tastypie.resources import ModelResource
from api.models import Note
from tastypie.authorization import Authorization

class NoteResource(ModelResource):
    class Meta:
        queryset = Note.objects.all()
        resource_name = 'note'
        authorization = Authorization()
</code></pre>

<pre><code>Now it works! Try the request, and we get back 201, AKA success!

To double check, you can send a GET request to
[http://localhost:8000/api/note](http://localhost:8000/api/note/1). You should
get back both notes.

Important warning: the Authorization class with TastyPie is, in their words,
great for development — but not suitable for actual deployment. You can dive
deeper into TastyPie authorization
[here](http://django-tastypie.readthedocs.io/en/latest/authorization.html).

### All the Endpoints

Okay, so we finished our GET and POST endpoints. What about PUT and DELETE?

Well, the magic of TastyPie is that they’re already done. Try updating or
deleting your first note by ending PUT or DELETE to
[http://localhost:8000/api/note/1/](http://localhost:8000/api/note/1/). It just
works!

Just like that, we created a working RESTful API.

### Limiting Fields

If you wanted to only send specific information about a resource, you can limit
fields like so:
</code></pre>

<pre><code>from tastypie.resources import ModelResource
from api.models import Note
from tastypie.authorization import Authorization

class NoteResource(ModelResource):
    class Meta:
        queryset = Note.objects.all()
        resource_name = 'note'
        authorization = Authorization()
        fields = ['title', 'body']
</code></pre>

<p>```
Now you won’t see our created_at field in any requests.</p>

<h3>Final Notes</h3>

<p>Thanks for reading. If this tutorial has been helpful, please share it with your friends and fellow devs.</p>

<p>You can also follow me for more tutorials and guides. And, as always, please
leave any feedback or questions in the comments!</p>
]]></content>
  </entry>
  
</feed>

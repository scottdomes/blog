<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Development | Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-08-25T11:12:44-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Flexbox Works — Explained With Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs/"/>
    <updated>2017-08-11T16:52:52-07:00</updated>
    <id>http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs</id>
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/1*zyzR64aw4rDPsoG-ZwZ9rQ.png" alt="" /></p>

<p>Flexbox promises to save us from the evils of plain CSS (like vertical
alignment).</p>

<p>Well, Flexbox does deliver on that goal. But mastering its new mental model can
be challenging.</p>

<p>So let’s take an animated look at how Flexbox works, so we can use it to build
better layouts.</p>

<!--more-->


<p>Flexbox’s underlying principle is to make layouts flexible and intuitive.</p>

<p>To accomplish this, it lets containers decide for themselves how to evenly
distribute their children — including their size and the space between them.</p>

<p>This all sounds good in principle. But let’s see what it looks like in practice.</p>

<p>In this article, we’ll dive into the 5 most common Flexbox properties. We’ll
explore what they do, how you can use them, and what their results will actually
look like.</p>

<h3>Property #1: Display: Flex</h3>

<p>Here’s our example webpage:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*ifusEqwI87nBKXgK9oZ_7A.gif" alt="" /></p>

<p>You have four colored divs of various sizes, held within a grey container div.
As of now, each div has defaulted to . Each square thus takes up the full width
of its line.</p>

<p>In order to get started with Flexbox, you need to make your <strong>container</strong> into a
<strong>flex container</strong>. This is as easy as:</p>

<pre><code class="css">#container {
  display: flex;
}
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*L2W-ziqU45a1BNWV79ijDQ.gif" alt="" /></p>

<p>Not a lot has changed — your divs are displayed inline now, but that’s about it.
But behind the scenes, you’ve done something powerful. <strong>You gave your squares
something called a flex context.</strong></p>

<p>You can now start to position them within that context, with far less difficulty
than traditional CSS.</p>

<h3>Property #2: Flex Direction</h3>

<p>A Flexbox container has two axes: <strong>a main axis</strong> and <strong>a cross axis</strong>, which
default to looking like this:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png" alt="" /></p>

<p><strong>By default, items are arranged along the main axis, from left to right</strong>. This
is why your squares defaulted to a horizontal line once you applied <code>display: flex</code>.</p>

<p><code>flex-direction</code>, however, let’s you rotate the main axis.</p>

<pre><code class="css">#container {
  display: flex;
  flex-direction: column;
}
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*4yKnG2-vuPF5XA-BmXADLQ.gif" alt="" /></p>

<p>There’s an important distinction to make here: <code>flex-direction: column</code> doesn’t align the squares on the
cross axis instead of the main axis.<strong> It makes the main axis itself go from
horizontal to vertical.</strong></p>

<p>There are a couple of other options for flex-direction, as well: <em>row-reverse
</em>and <em>column-reverse.</em></p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*PBr_ncouIehALaEOWmSbpQ.gif" alt="" /></p>

<h3>Property #3: Justify Content</h3>

<p><em>Justify-content</em> controls how you align items on the <strong>main axis.</strong></p>

<p>Here, you’ll dive a bit deeper into the main/cross axis distinction. First,
let’s go back to flex-direction: row.</p>

<pre><code class="css">#container {
  display: flex;
  flex-direction: row;
}
</code></pre>

<p>You have five commands at your disposal to use <em>justify-content</em>:</p>

<ol>
<li>Flex-start</li>
<li>Flex-end</li>
<li>Center</li>
<li>Space-between</li>
<li>Space-around</li>
</ol>


<p><img src="https://cdn-images-1.medium.com/max/1000/1*2-6Tw8jqWrMKOfIugKyuDA.gif" alt="" /></p>

<p>Space-around and space-between are the least intuitive. <strong>Space-between gives
equal space between each square, but not between it and the container.</strong></p>

<p>Space-around puts an equal cushion of space on either side of the square — which
means <strong>the space between the outermost squares and the container is half as
much as the space between two squares</strong> (each square contributing a
non-overlapping equal amount of margin, thus doubling the space).</p>

<p>A final note: remember that<strong> justify-content works along the main-axis</strong>, and
<strong>flex-direction switches the main-axis</strong>. This will be important as you move
to…</p>

<h3>Property #4: Align Items</h3>

<p>If you ‘get’ justify-content, align-items will be a breeze.</p>

<p>As justify-content works along the main axis,<strong> align-items applies to the cross
axis.</strong></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png" alt="" /></p>

<p>Let’s reset our <em>flex-direction</em> to row, so our axes look the same as the above
image.</p>

<p>Then, let’s dive into the align-items commands.</p>

<ol>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch</li>
<li>baseline</li>
</ol>


<p>The first three are exactly the same as <em>justify-content</em>, so nothing too fancy
here.</p>

<p>The next two are a bit different, however.</p>

<p>You have stretch, in which the items take up the entirety of the cross-axis, and
baseline, in which the bottom of the paragraph tags are aligned.</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*htfdNmRIIFu_veRaFOj5qA.gif" alt="" /></p>

<p>(Note that for , I had to set the height of the squares to auto. Otherwise the
height property would override the stretch.)</p>

<p>For baseline, be aware that if you take away the paragraph tags, it aligns the
bottom of the squares instead, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*6dd9KnKMUN49lFsbHlJi6A.png" alt="" /></p>

<p>To demonstrate the main and cross axes better, let’s combine justify-content and
align-items and see how centering works different for the two flex-direction
commands:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*6mq-Uay7t6NhdF2E41Do0g.gif" alt="" /></p>

<p><strong>With row, the squares are set up along a horizontal main axis. With column,
they fall along a vertical main axis.</strong></p>

<p>Even if the squares are centered both vertically and horizontally in both cases,
the two are not interchangeable!</p>

<h3>Property #5: Align Self</h3>

<p><em>Align-self</em> allows you to manually manipulate the alignment of one particular
element.</p>

<p>It’s basically overriding <em>align-items</em> for one square. All the properties are
the same, though it defaults to <em>auto</em>, in which it follows the <em>align-items</em> of
the container.</p>

<pre><code class="css">#container {
  align-items: flex-start;
}

.square#one {
  align-self: center;
}
// Only this square will be centered.
</code></pre>

<p>Let’s see what this looks like. You’ll apply <em>align-self</em> to two squares, and
for the rest apply <code>align-items: center</code> and <code>flex-direction: row</code>.</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*HIADl1oL6pxXb2dMh_pXSQ.gif" alt="" /></p>

<h3>Conclusion</h3>

<p>Even though we’ve just scratched the surface of Flexbox, these commands should
be enough for you to handle most basic alignments — and to vertically align to
your heart’s content.</p>

<p>If you want to see more GIF Flexbox tutorials, or if this tutorial was helpful
to you, hit the green heart below or leave a comment.</p>

<p>Thanks for reading!</p>

<p><em>Article originally published on freeCodeCamp&rsquo;s Medium publication.</em> <a href="https://medium.freecodecamp.org/an-animated-guide-to-flexbox-d280cf6afc35">View Original</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Best Practices for Writing React Components]]></title>
    <link href="http://scottdomes.com/blog/our-best-practices-for-writing-react-components/"/>
    <updated>2017-08-11T16:51:15-07:00</updated>
    <id>http://scottdomes.com/blog/our-best-practices-for-writing-react-components</id>
    <content type="html"><![CDATA[<p>When I first started writing React, I remember seeing many different
approaches to writing components, varying greatly from tutorial to tutorial.
Though the framework has matured considerably since then, there doesn’t seem to
yet be a firm ‘right’ way of doing things.</p>

<p>Over the past year at <a href="https://musefind.com/">MuseFind</a>, our team has written a
lot of React components. We’ve gradually refined our approach until we’re happy
with it.</p>

<p>This guide represents our suggested best practices. We hope it will be useful,
whether you’re a beginner or experienced.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*GEniDHmmO0nkVuKQ8fhLYw.png" alt="" /></p>

<!--more-->


<p>Before we get started, a couple of notes:</p>

<ul>
<li>We use ES6 and ES7 syntax.</li>
<li>If you’re not sure of the distinction between presentational and container
components, we recommend you <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kuvqndiqq">read this
first</a>.</li>
<li>Please let us know in the comments if you have any suggestions, questions, or
feedback.</li>
</ul>


<h3>Class Based Components</h3>

<p>Class based components are stateful and/or contain methods. We try to use them
as sparingly as possible, but they have their place.</p>

<p>Let’s incrementally build our component, line by line.</p>

<h4>Importing CSS</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>I like <a href="https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55">CSS in
JavaScript</a>,
I do — in theory. But it’s still a new idea, and a mature solution hasn’t
emerged. Until then, we import a CSS file to each component.</p>

<p>We also separate our dependency imports from local imports by a newline.</p>

<h4>Initializing State</h4>

<pre><code class="javascript">    import 
    , { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>You can also use the older approach of initializing state in the constructor.
More on that
<a href="http://stackoverflow.com/questions/35662932/react-constructor-es6-vs-es7">here</a>.
We prefer the cleaner way.</p>

<p>We also make sure to export our class as the default.</p>

<h4>propTypes and defaultProps</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
</code></pre>

<p>propTypes and defaultProps are static properties, declared as high as possible
within the component code.They should be immediately visible to other devs
reading the file, since they serve as documentation.</p>

<p>If using React 15.3.0 or higher, use the
<a href="https://github.com/reactjs/prop-types">prop-types</a> package instead of
React.PropTypes — nicely destructured, of course.</p>

<p>All your components should have propTypes.</p>

<h4>Methods</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }

      static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
      }
</code></pre>

<p>With class components, when you pass methods to subcomponents, you have to
ensure that they have the right <em>this** </em>when they’re called.This is usually
achieved by passing <em>this.handleSubmit.bind(this)</em> to the subcomponent.</p>

<p>We think this approach is cleaner and easier, maintaining the correct context
automatically via the ES6 arrowfunction.</p>

<h4><strong>Passing setState a Function</strong></h4>

<p>In the above example, we do this:
<code>javascript
this.setState({ expanded: !this.state.expanded })
</code>
Here’s the dirty secret about setState — it’s actually asynchronous. React
batches state changes for performance reasons, so the state may not change
immediately after setState is called.</p>

<p>That means you should not rely on the current state when calling setState —
since you can’t be sure what that state will be!</p>

<p>Here’s the solution — pass a function to setState, with the previous state as an
argument.</p>

<pre><code class="javascript">this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
</code></pre>

<p>(Thanks to <a href="https://medium.com/@indiesquidge">Austin Wood</a> for his help with
this section).</p>

<h4>Destructuring Props</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
     static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
        title: 'Your Name'
      }

    handleSubmit = (e) =&gt; {
        e.preventDefault()
        this.props.model.save()
      }

      handleNameChange = (e) =&gt; {
        this.props.model.changeName(e.target.value)
      }

      handleExpand = (e) =&gt; {
        e.preventDefault()
        this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
      }

    }
</code></pre>

<p>Components with many props should have each prop on a newline, like above.</p>

<h4>Decorators</h4>

<pre><code>export default class ProfileContainer extends Component {
</code></pre>

<p>If you’re using something like <a href="https://github.com/mobxjs/mobx">mobx</a>, you can
decorate your class components like so — which is the same as passing the
component into a function.</p>

<p><a href="http://javascript.info/tutorial/decorators">Decorators</a> are flexible and
readable way of modifying component functionality.We use them extensively, with
mobx and our own <a href="https://github.com/musefind/mobx-models">mobx-models</a> library.</p>

<p>If you don’t want to use decorators, do the following:</p>

<pre><code class="javascript">    class ProfileContainer extends Component {
      // Component code
    }

    export default observer(ProfileContainer)
</code></pre>

<h4>Closures</h4>

<p>Avoid passing new closures to subcomponents, like so:</p>

<pre><code class="html">              &lt;input
                type="text"
                value={model.name}
                // onChange={(e) =&gt; { model.name = e.target.value }}
                // 

                placeholder="Your Name"/&gt;
</code></pre>

<p>Here’s why: every time the parent component renders, a new function is created
and passed tothe input.</p>

<p>If the input were a React component, this would automatically trigger it to
re-render, regardless of whether its other props have actually changed.</p>

<p>Reconciliation is the most expensivepart of React. Don’t make it harder than it
needs to be! Plus, passing aclass method is easier to read, debug, and change.</p>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/70e436951dfeeb82dfdd4aa6d2541dce.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { string, object } from &#39;prop-types&#39;
// Separate local imports from dependencies
import ExpandableForm from &#39;./ExpandableForm&#39;
import &#39;./styles/ProfileContainer.css&#39;

// Use decorators if needed
@observer
export default class ProfileContainer extends Component {
  state = { expanded: false }
  // Initialize state here (ES7) or in a constructor method (ES6)
 
  // Declare propTypes as static properties as early as possible
  static propTypes = {
    model: object.isRequired,
    title: string
  }

  // Default props below propTypes
  static defaultProps = {
    model: {
      id: 0
    },
    title: &#39;Your Name&#39;
  }

  // Use fat arrow functions for methods to preserve context (this will thus be the component instance)
  handleSubmit = (e) =&gt; {
    e.preventDefault()
    this.props.model.save()
  }
  
  handleNameChange = (e) =&gt; {
    this.props.model.name = e.target.value
  }
  
  handleExpand = (e) =&gt; {
    e.preventDefault()
    this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
  }
  
  render() {
    // Destructure props for readability
    const {
      model,
      title
    } = this.props
    return ( 
      &lt;ExpandableForm 
        onSubmit={this.handleSubmit} 
        expanded={this.state.expanded} 
        onExpand={this.handleExpand}&gt;
        // Newline props if there are more than two
        &lt;div&gt;
          &lt;h1&gt;{title}&lt;/h1&gt;
          &lt;input
            type=&quot;text&quot;
            value={model.name}
            // onChange={(e) =&gt; { model.name = e.target.value }}
            // Avoid creating new closures in the render method- use methods like below
            onChange={this.handleNameChange}
            placeholder=&quot;Your Name&quot;/&gt;
        &lt;/div&gt;
      &lt;/ExpandableForm&gt;
    )
  }
}</code></pre></noscript></div>
</p>

<h3>Functional Components</h3>

<p>These components have no state and no methods.They’re pure, and easy to reason
about. Use them as often as possible.</p>

<h4>propTypes</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool
    }

    // Component declaration
</code></pre>

<p>Here, we assign the propTypes before the component declaration, so they are
immediately visible. We’re able to do this because of JavaScript function
hoisting.</p>

<h4>Destructuring Props and defaultProps</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }
</code></pre>

<p>Our component is a function, which takes its props as its argument. We can
expand them like so:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Note we can also use default arguments to act as defaultProps in a highly
readable manner. If expanded is undefined, we set it to false. (A bit of a
forced example, since it’s a boolean, but very useful for avoiding ‘Cannot read
<property> of undefined’ errors with objects).</p>

<p>Avoid the following ES6 syntax:</p>

<pre><code class="javascript">const ExpandableForm = ({ onExpand, expanded, children }) =&gt; {
</code></pre>

<p>Looks very modern, but the function here is actually unnamed.</p>

<p>This lack of name will not be a problem if your Babel is set up correctly — but
if it’s not, any errors will show up as occurring in &lt;<anonymous>> which is
terrible for debugging.</p>

<p>Unnamed functions can also cause problems with Jest, a React testing library.
Due to the potential for difficult-to-understand bugs (and the lack of real
benefit) we recommend using <em>function </em>instead of<em> const.</em></p>

<h4>Wrapping</h4>

<p>Since you can’t use decorators with functional components, you simply pass it
the function in as an argument:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

    function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/19d4ade69b1a3978730b104558fb5308.js'></script>
<noscript><pre><code>import React from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { func, bool } from &#39;prop-types&#39;
// Separate local imports from dependencies
import &#39;./styles/Form.css&#39;

// Declare propTypes here, before the component (taking advantage of JS function hoisting)
// You want these to be as visible as possible
ExpandableForm.propTypes = {
  onSubmit: func.isRequired,
  expanded: bool,
  onExpand: func.isRequired
}

// Destructure props like so, and use default arguments as a way of setting defaultProps
function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
  const formStyle = expanded ? { height: &#39;auto&#39; } : { height: 0 }
  return (
    &lt;form style={formStyle} onSubmit={onSubmit}&gt;
      {children}
      &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
    &lt;/form&gt;
  )
}

// Wrap the component instead of decorating it
export default observer(ExpandableForm)</code></pre></noscript></div>
</p>

<h3>Conditionals in JSX</h3>

<p>Chances are you’re going to do a lot of conditional rendering. Here’s what you
want to avoid:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*4zdSbYcOXTVchgSJqtk0Ig.png" alt="" />
^ Actual code I wrote in my early days at MuseFind… forgive me</p>

<p>No,nested ternaries are not a good idea.</p>

<p>There are some libraries that solve this problem (<a href="https://github.com/AlexGilleran/jsx-control-statements">JSX-Control
Statements</a>), but rather
than introduce another dependency, we settled on this approach for complex
conditions:</p>

<p>A refactored version of the above:
<img src="https://cdn-images-1.medium.com/max/800/1*IVFlMaSGKqHISJueTC26sw.png" alt="" /></p>

<p>Use curly braces wrapping an
<a href="http://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript">IIFE</a>,
and then put your if statements inside, returning whatever you want to render.
Note that IIFE’s like this can cause a performance hit, but in most cases it
will not be significant enough to warrant losing the readability factor.</p>

<p><strong>Update: </strong>Many commenters have recommended extracting this logic to a
subcomponent that conditionally returns different buttons based on props.They’re
right — splitting up your components as much as possible is always a good call.
But keep the IIFE approach in mind as a fallback for quick conditionals.</p>

<p>Also, when you only want to render an element on one condition, instead of doing
this…</p>

<pre><code class="javascript">    {
      isTrue
       ? &lt;p&gt;True!&lt;/p&gt;
       : &lt;none/&gt;
    }
</code></pre>

<p>… use short-circuit evaluation:</p>

<pre><code class="javascript">{
  isTrue &amp;&amp; 
    &lt;p&gt;True!&lt;/p&gt;
}
</code></pre>

<h3>Conclusion</h3>

<p>Was this article useful? Share it with your friends and fellow devs.</p>

<p>Have any feedback? Leave a comment below.</p>

<p>Thanks for reading!</p>

<p>(Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter—subscribe below.)</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Django API in Under 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes/"/>
    <updated>2017-08-11T16:51:01-07:00</updated>
    <id>http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes</id>
    <content type="html"><![CDATA[<p>Django is by far the most popular Python framework, designed to provide
Rails-like ease of use. Let’s see how quickly we can set up a simple API using
Django and a library called TastyPie.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*cGZQTle3SrxD9STT9LuuMQ.png" alt="" /></p>

<!--more-->


<p>For those of you who read the <a href="https://medium.com/@scottdomes/building-a-simple-node-js-api-in-under-30-minutes-a07ea9e390d2#.mov6a516k">Node API
tutorial</a>,
we’re now going to attempt to do the same thing with Django. We’ll also very
quickly see how Django makes some things harder, and some things much much
easier.</p>

<p><strong>Who This Tutorial Is For</strong>: You should have a basic understanding of REST APIs
and CRUD operations. Python knowledge is a plus but not necessary. You’ll pick
it up.</p>

<p>We’ll be building an API for a Google Keep-esque note-taking web app. We want to
build a REST-ful API with the CRUD endpoints, to create, read, update, and
delete notes. The good news is that rather than approach these endpoints
individually, Django lets us more or less create them all in one fell swoop.</p>

<h3><strong>Setting Up Our Project</strong></h3>

<p>Django divides your work into projects and apps. Projects contain apps, but apps
do not necessarily belong to a certain project — the idea is to make them
reusable across projects.</p>

<p>We’ll only be making one app within one project, but the file structure may seem
a little odd if you don’t keep this in mind.</p>

<p><a href="https://www.python.org/downloads/">Install Python</a> if you haven’t done so, then
let’s install Django and create our project:
<code>
    pip install Django
    django-admin startproject notable_django
    cd notable_django
</code>
Next we’ll install
<a href="https://github.com/django-tastypie/django-tastypie">TastyPie</a>, which will
supply us with a REST framework.
<code>
    pip install django-tastypie
</code>
Finally, we can start our app within our project:
<code>
    python manage.py startapp api
</code>
Within your notable_django directory, you should now have two subfolders: one
also called notable_django, and another named api (as well as a manage.py file).</p>

<p>The distinction between the two can be thought of like this: the notable_django
contains the settings for the configuration of the project, as well as exposing
URLs. The api folder handles the actual API magic.</p>

<p>Before we go on, we have to install our app within our project, inside
notable_django/settings-py:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># notable_django/settings.py&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Again</span><span class="p">,</span> <span class="n">our</span> <span class="n">project</span> <span class="n">can</span> <span class="n">have</span> <span class="n">multiple</span> <span class="n">apps</span> <span class="n">installed</span> <span class="err">—</span> <span class="ow">and</span> <span class="n">those</span> <span class="n">apps</span> <span class="n">aren</span><span class="err">’</span><span class="n">t</span>
</span><span class='line'><span class="n">necessarily</span> <span class="n">tied</span> <span class="n">to</span> <span class="n">that</span> <span class="n">project</span><span class="o">.</span> <span class="n">Our</span> <span class="n">project</span> <span class="n">here</span> <span class="ow">is</span> <span class="n">notable_django</span><span class="p">,</span> <span class="ow">and</span> <span class="n">our</span>
</span><span class='line'><span class="n">app</span> <span class="ow">is</span> <span class="n">called</span> <span class="n">api</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">With</span> <span class="n">that</span> <span class="n">done</span><span class="p">,</span> <span class="n">we</span><span class="err">’</span><span class="n">re</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">start</span> <span class="n">building</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### A Model Start</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">first</span> <span class="n">thing</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="n">create</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">Note</span> <span class="n">model</span> <span class="n">to</span> <span class="n">interact</span> <span class="k">with</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">those</span> <span class="n">unfamiliar</span> <span class="k">with</span> <span class="n">models</span><span class="p">,</span> <span class="p">[</span><span class="n">this</span>
</span><span class='line'><span class="n">description</span><span class="p">](</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">docs</span><span class="o">.</span><span class="n">djangoproject</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">en</span><span class="o">/</span><span class="mf">1.10</span><span class="o">/</span><span class="n">topics</span><span class="o">/</span><span class="n">db</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="p">)</span> <span class="kn">from</span> <span class="nn">the</span>
</span><span class='line'><span class="n">Django</span> <span class="n">docs</span> <span class="ow">is</span> <span class="k">as</span> <span class="n">good</span> <span class="k">as</span> <span class="nb">any</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">A</span> <span class="n">model</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">single</span><span class="p">,</span> <span class="n">definitive</span> <span class="n">source</span> <span class="n">of</span> <span class="n">information</span> <span class="n">about</span> <span class="n">your</span> <span class="n">data</span><span class="o">.</span> <span class="n">It</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">essential</span> <span class="n">fields</span> <span class="ow">and</span> <span class="n">behaviors</span> <span class="n">of</span> <span class="n">the</span> <span class="n">data</span> <span class="n">you</span><span class="err">’</span><span class="n">re</span> <span class="n">storing</span><span class="o">.</span>
</span><span class='line'><span class="n">Generally</span><span class="p">,</span> <span class="n">each</span> <span class="n">model</span> <span class="n">maps</span> <span class="n">to</span> <span class="n">a</span> <span class="n">single</span> <span class="n">database</span> <span class="n">table</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Django</span> <span class="ow">is</span> <span class="n">unique</span> <span class="p">(</span><span class="n">compared</span> <span class="n">to</span> <span class="n">a</span> <span class="n">framework</span> <span class="n">like</span> <span class="n">Ruby</span> <span class="n">on</span> <span class="n">Rails</span><span class="p">)</span> <span class="ow">in</span> <span class="n">that</span> <span class="n">your</span>
</span><span class='line'><span class="n">migrations</span> <span class="n">follow</span> <span class="n">how</span> <span class="n">you</span> <span class="n">define</span> <span class="n">your</span> <span class="n">models</span><span class="p">,</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">being</span> <span class="n">separately</span>
</span><span class='line'><span class="n">defined</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">We</span><span class="err">’</span><span class="n">re</span> <span class="n">going</span> <span class="n">to</span> <span class="n">create</span> <span class="n">our</span> <span class="n">Note</span> <span class="n">model</span><span class="p">,</span> <span class="ow">and</span> <span class="n">then</span> <span class="n">run</span> <span class="n">our</span> <span class="n">migrations</span><span class="p">,</span> <span class="n">which</span> <span class="n">will</span>
</span><span class='line'><span class="nb">set</span> <span class="n">up</span> <span class="n">our</span> <span class="n">database</span> <span class="k">with</span> <span class="n">a</span> <span class="n">notes</span> <span class="n">table</span> <span class="p">(</span><span class="k">with</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">appropriate</span> <span class="n">fields</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">create</span> <span class="n">our</span> <span class="n">model</span><span class="p">,</span> <span class="ow">in</span> <span class="n">api</span><span class="o">/</span><span class="n">models</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">We</span> <span class="n">define</span> <span class="n">our</span> <span class="n">fields</span><span class="p">,</span> <span class="n">along</span> <span class="k">with</span> <span class="n">the</span> <span class="nb">type</span> <span class="n">of</span> <span class="n">each</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="nb">next</span> <span class="n">thing</span> <span class="n">we</span> <span class="n">want</span> <span class="n">to</span> <span class="n">do</span> <span class="ow">is</span> <span class="n">add</span> <span class="n">a</span> <span class="n">__str__</span> <span class="n">method</span> <span class="n">to</span> <span class="n">the</span> <span class="n">model</span><span class="o">.</span> <span class="n">This</span> <span class="n">method</span>
</span><span class='line'><span class="n">defines</span> <span class="n">what</span> <span class="n">we</span> <span class="n">get</span> <span class="n">when</span> <span class="n">we</span> <span class="n">ask</span> <span class="k">for</span> <span class="n">a</span> <span class="n">particular</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">a</span> <span class="n">model</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">this</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">…</span> <span class="n">means</span> <span class="n">that</span> <span class="n">when</span> <span class="n">we</span> <span class="n">grab</span> <span class="nb">any</span> <span class="n">Note</span> <span class="n">model</span><span class="p">,</span> <span class="n">we</span><span class="err">’</span><span class="n">ll</span> <span class="n">get</span> <span class="n">back</span> <span class="n">only</span> <span class="n">the</span> <span class="n">title</span><span class="o">.</span> <span class="n">This</span>
</span><span class='line'><span class="n">just</span> <span class="n">keeps</span> <span class="n">things</span> <span class="n">clean</span><span class="o">.</span> <span class="p">(</span><span class="n">We</span> <span class="n">will</span> <span class="n">only</span> <span class="n">be</span> <span class="n">interacting</span> <span class="k">with</span> <span class="n">our</span> <span class="n">models</span> <span class="ow">in</span> <span class="n">this</span>
</span><span class='line'><span class="n">manner</span> <span class="n">through</span> <span class="n">the</span> <span class="n">Python</span> <span class="n">shell</span><span class="p">,</span> <span class="n">so</span> <span class="n">it</span><span class="err">’</span><span class="n">s</span> <span class="ow">not</span> <span class="nb">super</span> <span class="n">necessary</span><span class="p">,</span> <span class="n">but</span> <span class="n">good</span> <span class="n">to</span> <span class="n">be</span>
</span><span class='line'><span class="n">aware</span> <span class="n">of</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">expand</span> <span class="n">our</span> <span class="n">__str__</span> <span class="n">method</span> <span class="n">to</span> <span class="n">also</span> <span class="n">include</span> <span class="n">the</span> <span class="n">body</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Okay</span><span class="p">,</span> <span class="n">our</span> <span class="n">model</span> <span class="ow">is</span> <span class="nb">all</span> <span class="nb">set</span> <span class="n">up</span><span class="o">.</span> <span class="n">Now</span> <span class="n">to</span> <span class="n">run</span> <span class="n">our</span> <span class="n">migrations</span><span class="p">,</span> <span class="n">which</span> <span class="n">will</span> <span class="nb">set</span> <span class="n">up</span> <span class="n">our</span>
</span><span class='line'><span class="n">database</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span>
</span><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">go</span> <span class="n">ahead</span> <span class="ow">and</span> <span class="n">populate</span> <span class="n">our</span> <span class="n">database</span> <span class="k">with</span> <span class="n">a</span> <span class="n">single</span> <span class="n">note</span><span class="p">,</span> <span class="n">to</span> <span class="n">make</span> <span class="n">sure</span> <span class="nb">all</span> <span class="ow">is</span>
</span><span class='line'><span class="n">well</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">shell</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">note</span> <span class="o">=</span> <span class="n">Note</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&quot;First Note&quot;</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&quot;This is certainly noteworthy&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">note</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">QuerySet</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Note</span><span class="p">:</span> <span class="n">First</span> <span class="n">Note</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">certainly</span> <span class="n">noteworthy</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">exit</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">We</span> <span class="n">create</span> <span class="n">our</span> <span class="n">note</span><span class="p">,</span> <span class="n">save</span> <span class="n">it</span><span class="p">,</span> <span class="n">then</span> <span class="n">retrieve</span> <span class="nb">all</span> <span class="n">notes</span><span class="o">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">see</span> <span class="n">our</span> <span class="n">__str__</span>
</span><span class='line'><span class="n">method</span> <span class="n">at</span> <span class="n">work</span><span class="p">,</span> <span class="n">returning</span> <span class="n">both</span> <span class="n">the</span> <span class="n">title</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">body</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">learn</span> <span class="n">more</span> <span class="n">about</span> <span class="n">the</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span> <span class="n">manager</span><span class="p">,</span> <span class="p">[</span><span class="n">see</span>
</span><span class='line'><span class="n">here</span><span class="p">](</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">docs</span><span class="o">.</span><span class="n">djangoproject</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">en</span><span class="o">/</span><span class="mf">1.10</span><span class="o">/</span><span class="n">topics</span><span class="o">/</span><span class="n">db</span><span class="o">/</span><span class="n">managers</span><span class="o">/</span><span class="c">#django.db.models.Manager)).</span>
</span><span class='line'>
</span><span class='line'><span class="c">### API-ification</span>
</span><span class='line'>
</span><span class='line'><span class="n">Okay</span><span class="p">,</span> <span class="n">so</span> <span class="n">our</span> <span class="n">model</span> <span class="ow">and</span> <span class="n">database</span> <span class="n">are</span> <span class="nb">all</span> <span class="n">ready</span> <span class="n">to</span> <span class="n">go</span><span class="o">.</span> <span class="n">Now</span> <span class="n">to</span> <span class="n">expose</span> <span class="n">some</span>
</span><span class='line'><span class="n">endpoints</span> <span class="n">to</span> <span class="n">the</span> <span class="n">wider</span> <span class="n">world</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">can</span> <span class="n">interact</span> <span class="k">with</span> <span class="n">our</span> <span class="n">data</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">One</span> <span class="n">of</span> <span class="n">the</span> <span class="n">basics</span> <span class="n">of</span> <span class="n">RESTful</span> <span class="n">APIs</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">of</span> <span class="n">resources</span><span class="o">.</span> <span class="n">The</span> <span class="n">term</span> <span class="ow">is</span> <span class="n">rather</span>
</span><span class='line'><span class="n">abstract</span><span class="p">,</span> <span class="n">but</span> <span class="ow">in</span> <span class="n">this</span> <span class="n">context</span> <span class="n">it</span> <span class="n">refers</span> <span class="n">to</span> <span class="n">a</span> <span class="k">class</span> <span class="nc">that</span> <span class="n">sits</span> <span class="n">between</span> <span class="n">our</span> <span class="n">URLs</span>
</span><span class='line'><span class="ow">and</span> <span class="n">our</span> <span class="n">models</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span> <span class="n">user</span> <span class="n">will</span> <span class="n">make</span> <span class="n">a</span> <span class="n">request</span> <span class="n">to</span> <span class="n">an</span> <span class="n">endpoint</span><span class="o">.</span> <span class="n">Depending</span> <span class="n">on</span> <span class="n">the</span> <span class="n">URL</span><span class="p">,</span> <span class="n">the</span> <span class="n">user</span> <span class="n">will</span>
</span><span class='line'><span class="n">be</span> <span class="n">redirected</span> <span class="n">to</span> <span class="n">a</span> <span class="n">particular</span> <span class="n">resource</span><span class="p">,</span> <span class="n">which</span> <span class="n">will</span> <span class="n">then</span> <span class="n">perform</span> <span class="n">the</span> <span class="n">appropriate</span>
</span><span class='line'><span class="n">CRUD</span> <span class="n">action</span> <span class="n">on</span> <span class="n">the</span> <span class="n">model</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Again</span><span class="p">,</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">simplified</span> <span class="n">explanation</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">complex</span> <span class="n">topic</span> <span class="err">—</span> <span class="n">let</span><span class="err">’</span><span class="n">s</span> <span class="n">go</span> <span class="n">ahead</span> <span class="ow">and</span>
</span><span class='line'><span class="n">see</span> <span class="n">it</span> <span class="ow">in</span> <span class="n">practice</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="n">your</span> <span class="n">api</span> <span class="n">folder</span><span class="p">,</span> <span class="n">create</span> <span class="n">a</span> <span class="n">new</span> <span class="nb">file</span> <span class="n">called</span> <span class="o">*</span><span class="n">resources</span><span class="o">.</span><span class="n">py</span><span class="o">.*</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># api/resources.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">We</span> <span class="kn">import</span> <span class="nn">our</span> <span class="nn">model</span><span class="o">,</span> <span class="nn">and</span> <span class="nn">create</span> <span class="nn">a</span> <span class="nn">resource</span> <span class="nn">from</span> <span class="nn">it.</span> <span class="nn">The</span> <span class="o">*</span><span class="n">queryset</span><span class="o">*</span> <span class="p">(</span><span class="n">what</span> <span class="n">models</span>
</span><span class='line'><span class="n">the</span> <span class="n">resource</span> <span class="ow">is</span> <span class="n">concerned</span> <span class="k">with</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">all</span> <span class="n">note</span> <span class="n">objects</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">We</span> <span class="n">also</span> <span class="n">name</span> <span class="n">the</span> <span class="n">resource</span> <span class="n">appropriately</span><span class="p">:</span> <span class="err">‘</span><span class="n">note</span><span class="err">’</span><span class="o">.</span> <span class="n">This</span> <span class="n">will</span> <span class="n">be</span> <span class="n">important</span> <span class="k">for</span>
</span><span class='line'><span class="n">URLs</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Speaking</span> <span class="n">of</span> <span class="n">which</span><span class="p">,</span> <span class="n">let</span><span class="err">’</span><span class="n">s</span> <span class="nb">set</span> <span class="n">those</span> <span class="n">up</span> <span class="ow">in</span> <span class="n">our</span> <span class="n">notable_django</span><span class="o">/</span><span class="n">urls</span><span class="o">.</span><span class="n">py</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">We</span> <span class="kn">import</span> <span class="nn">our</span> <span class="nn">NoteResource</span><span class="o">,</span> <span class="nn">instantiate</span> <span class="nn">it</span><span class="o">,</span> <span class="nn">and</span> <span class="nn">then</span> <span class="nn">say</span> <span class="nn">that</span> <span class="nn">we</span> <span class="nn">want</span> <span class="nn">all</span> <span class="nn">URLs</span>
</span><span class='line'><span class="n">that</span> <span class="n">start</span> <span class="k">with</span> <span class="n">api</span><span class="o">/</span> <span class="n">to</span> <span class="n">redirect</span> <span class="n">to</span> <span class="n">the</span> <span class="n">resource</span><span class="o">.</span> <span class="p">(</span><span class="n">Don</span><span class="err">’</span><span class="n">t</span> <span class="n">forget</span> <span class="n">to</span> <span class="kn">import</span>
</span><span class='line'><span class="o">*</span><span class="n">include</span> <span class="o">*</span><span class="kn">from</span> <span class="nn">django.conf.urls</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Testing Our API</span>
</span><span class='line'>
</span><span class='line'><span class="n">Finally</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">get</span> <span class="n">running</span><span class="o">.</span> <span class="n">As</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">Node</span> <span class="n">tutorial</span><span class="p">,</span> <span class="n">we</span><span class="err">’</span><span class="n">re</span> <span class="n">going</span> <span class="n">to</span> <span class="n">use</span> <span class="n">Postman</span>
</span><span class='line'><span class="n">to</span> <span class="n">make</span> <span class="n">API</span> <span class="n">requests</span><span class="o">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">get</span> <span class="n">it</span> <span class="p">[</span><span class="n">here</span><span class="p">](</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">getpostman</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">runserver</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Now</span> <span class="ow">in</span> <span class="n">Postman</span><span class="p">,</span> <span class="n">let</span><span class="err">’</span><span class="n">s</span> <span class="n">send</span> <span class="n">a</span> <span class="n">GET</span> <span class="n">request</span> <span class="n">to</span> <span class="n">this</span> <span class="n">URL</span><span class="p">:</span>
</span><span class='line'><span class="p">[</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">!</span><span class="p">[](</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">cdn</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="mf">1.</span><span class="n">medium</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="nb">max</span><span class="o">/</span><span class="mi">800</span><span class="o">/</span><span class="mi">1</span><span class="o">*</span><span class="mi">8</span><span class="n">Paypbwf_k8z</span><span class="o">-</span><span class="n">csMl2xpVw</span><span class="o">.</span><span class="n">png</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Great</span><span class="err">!</span> <span class="n">Our</span> <span class="n">GET</span> <span class="n">endpoint</span> <span class="ow">is</span> <span class="n">working</span> <span class="n">perfectly</span><span class="o">.</span> <span class="n">Easy</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Now</span> <span class="n">let</span><span class="err">’</span><span class="n">s</span> <span class="k">try</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">new</span> <span class="n">note</span> <span class="kn">from</span> <span class="nn">Postman.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### POST, PUT, DELETE</span>
</span><span class='line'>
</span><span class='line'><span class="n">We</span><span class="err">’</span><span class="n">re</span> <span class="n">going</span> <span class="n">to</span> <span class="n">send</span> <span class="n">a</span> <span class="n">raw</span> <span class="n">JSON</span> <span class="nb">object</span> <span class="k">as</span> <span class="n">our</span> <span class="n">new</span> <span class="n">note</span><span class="p">,</span> <span class="n">like</span> <span class="n">so</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="err">!</span><span class="p">[](</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">cdn</span><span class="o">-</span><span class="n">images</span><span class="o">-</span><span class="mf">1.</span><span class="n">medium</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="nb">max</span><span class="o">/</span><span class="mi">800</span><span class="o">/</span><span class="mi">1</span><span class="o">*</span><span class="n">bbtveT</span><span class="o">-</span><span class="n">w_9ji_nfjz9</span><span class="o">-</span><span class="n">pMA</span><span class="o">.</span><span class="n">png</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Make</span> <span class="n">sure</span> <span class="n">you</span> <span class="n">select</span> <span class="n">JSON</span> <span class="kn">from</span> <span class="nn">the</span> <span class="nn">orange</span> <span class="nn">dropdown</span> <span class="nn">there</span><span class="err">!</span> <span class="n">This</span> <span class="n">will</span> <span class="nb">set</span> <span class="n">a</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="n">Type</span> <span class="n">header</span> <span class="p">(</span><span class="n">which</span> <span class="n">you</span> <span class="n">can</span> <span class="n">view</span> <span class="n">under</span> <span class="n">the</span> <span class="n">Headers</span> <span class="n">tab</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Also</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">you</span> <span class="n">send</span> <span class="n">the</span> <span class="n">request</span> <span class="n">to</span>
</span><span class='line'><span class="p">[</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">,</span> <span class="ow">not</span>
</span><span class='line'><span class="p">[</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span> <span class="n">That</span>
</span><span class='line'><span class="n">trailing</span> <span class="n">slash</span> <span class="ow">is</span> <span class="n">important</span><span class="p">,</span> <span class="n">since</span> <span class="n">otherwise</span> <span class="n">Django</span> <span class="n">has</span> <span class="n">to</span> <span class="n">redirect</span> <span class="n">you</span><span class="p">,</span> <span class="n">losing</span>
</span><span class='line'><span class="n">the</span> <span class="n">POST</span> <span class="n">data</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Send</span> <span class="n">that</span> <span class="n">request</span> <span class="ow">and</span><span class="err">…</span> <span class="n">it</span> <span class="n">fails</span><span class="o">.</span> <span class="n">We</span> <span class="n">get</span> <span class="n">back</span> <span class="n">a</span> <span class="mi">401</span><span class="p">,</span> <span class="n">AKA</span> <span class="n">Unauthorized</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">TastyPie</span> <span class="ow">is</span> <span class="n">protective</span> <span class="n">of</span> <span class="n">its</span> <span class="n">models</span> <span class="n">out</span> <span class="n">of</span> <span class="n">the</span> <span class="n">box</span><span class="p">,</span> <span class="ow">and</span> <span class="n">only</span> <span class="n">allows</span> <span class="n">reading</span><span class="p">,</span>
</span><span class='line'><span class="ow">not</span> <span class="n">modifying</span><span class="p">,</span> <span class="n">the</span> <span class="n">data</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">It</span><span class="err">’</span><span class="n">s</span> <span class="n">an</span> <span class="n">easy</span> <span class="n">fix</span><span class="p">,</span> <span class="n">though</span> <span class="err">—</span> <span class="kn">import</span> <span class="nn">their</span> <span class="nn">basic</span> <span class="nn">Authorization</span> <span class="nn">class</span><span class="o">,</span> <span class="nn">and</span> <span class="nn">add</span> <span class="nn">it</span> <span class="nn">to</span>
</span><span class='line'><span class="n">our</span> <span class="n">resource</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># api/resources.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.authorization</span> <span class="kn">import</span> <span class="n">Authorization</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span><span class='line'>    <span class="n">authorization</span> <span class="o">=</span> <span class="n">Authorization</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Now</span> <span class="n">it</span> <span class="n">works</span><span class="err">!</span> <span class="n">Try</span> <span class="n">the</span> <span class="n">request</span><span class="p">,</span> <span class="ow">and</span> <span class="n">we</span> <span class="n">get</span> <span class="n">back</span> <span class="mi">201</span><span class="p">,</span> <span class="n">AKA</span> <span class="n">success</span><span class="err">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">double</span> <span class="n">check</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">send</span> <span class="n">a</span> <span class="n">GET</span> <span class="n">request</span> <span class="n">to</span>
</span><span class='line'><span class="p">[</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span> <span class="n">You</span> <span class="n">should</span>
</span><span class='line'><span class="n">get</span> <span class="n">back</span> <span class="n">both</span> <span class="n">notes</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Important</span> <span class="n">warning</span><span class="p">:</span> <span class="n">the</span> <span class="n">Authorization</span> <span class="k">class</span> <span class="nc">with</span> <span class="n">TastyPie</span> <span class="ow">is</span><span class="p">,</span> <span class="ow">in</span> <span class="n">their</span> <span class="n">words</span><span class="p">,</span>
</span><span class='line'><span class="n">great</span> <span class="k">for</span> <span class="n">development</span> <span class="err">—</span> <span class="n">but</span> <span class="ow">not</span> <span class="n">suitable</span> <span class="k">for</span> <span class="n">actual</span> <span class="n">deployment</span><span class="o">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">dive</span>
</span><span class='line'><span class="n">deeper</span> <span class="n">into</span> <span class="n">TastyPie</span> <span class="n">authorization</span>
</span><span class='line'><span class="p">[</span><span class="n">here</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">django</span><span class="o">-</span><span class="n">tastypie</span><span class="o">.</span><span class="n">readthedocs</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">en</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">authorization</span><span class="o">.</span><span class="n">html</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### All the Endpoints</span>
</span><span class='line'>
</span><span class='line'><span class="n">Okay</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">finished</span> <span class="n">our</span> <span class="n">GET</span> <span class="ow">and</span> <span class="n">POST</span> <span class="n">endpoints</span><span class="o">.</span> <span class="n">What</span> <span class="n">about</span> <span class="n">PUT</span> <span class="ow">and</span> <span class="n">DELETE</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">Well</span><span class="p">,</span> <span class="n">the</span> <span class="n">magic</span> <span class="n">of</span> <span class="n">TastyPie</span> <span class="ow">is</span> <span class="n">that</span> <span class="n">they</span><span class="err">’</span><span class="n">re</span> <span class="n">already</span> <span class="n">done</span><span class="o">.</span> <span class="n">Try</span> <span class="n">updating</span> <span class="ow">or</span>
</span><span class='line'><span class="n">deleting</span> <span class="n">your</span> <span class="n">first</span> <span class="n">note</span> <span class="n">by</span> <span class="n">ending</span> <span class="n">PUT</span> <span class="ow">or</span> <span class="n">DELETE</span> <span class="n">to</span>
</span><span class='line'><span class="p">[</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">note</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="p">)</span><span class="o">.</span> <span class="n">It</span> <span class="n">just</span>
</span><span class='line'><span class="n">works</span><span class="err">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">Just</span> <span class="n">like</span> <span class="n">that</span><span class="p">,</span> <span class="n">we</span> <span class="n">created</span> <span class="n">a</span> <span class="n">working</span> <span class="n">RESTful</span> <span class="n">API</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Limiting Fields</span>
</span><span class='line'>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">wanted</span> <span class="n">to</span> <span class="n">only</span> <span class="n">send</span> <span class="n">specific</span> <span class="n">information</span> <span class="n">about</span> <span class="n">a</span> <span class="n">resource</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">limit</span>
</span><span class='line'><span class="n">fields</span> <span class="n">like</span> <span class="n">so</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.authorization</span> <span class="kn">import</span> <span class="n">Authorization</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span><span class='line'>    <span class="n">authorization</span> <span class="o">=</span> <span class="n">Authorization</span><span class="p">()</span>
</span><span class='line'>    <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;body&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="sb">``</span><span class="err">`</span>
</span><span class='line'><span class="n">Now</span> <span class="n">you</span> <span class="n">won</span><span class="err">’</span><span class="n">t</span> <span class="n">see</span> <span class="n">our</span> <span class="n">created_at</span> <span class="n">field</span> <span class="ow">in</span> <span class="nb">any</span> <span class="n">requests</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Final</span> <span class="n">Notes</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Thanks</span> <span class="k">for</span> <span class="n">reading</span><span class="o">.</span> <span class="n">If</span> <span class="n">this</span> <span class="n">tutorial</span> <span class="n">has</span> <span class="n">been</span> <span class="n">helpful</span><span class="p">,</span> <span class="n">please</span> <span class="n">share</span> <span class="n">it</span> <span class="k">with</span> <span class="n">your</span> <span class="n">friends</span> <span class="ow">and</span> <span class="n">fellow</span> <span class="n">devs</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">also</span> <span class="n">follow</span> <span class="n">me</span> <span class="k">for</span> <span class="n">more</span> <span class="n">tutorials</span> <span class="ow">and</span> <span class="n">guides</span><span class="o">.</span> <span class="n">And</span><span class="p">,</span> <span class="k">as</span> <span class="n">always</span><span class="p">,</span> <span class="n">please</span>
</span><span class='line'><span class="n">leave</span> <span class="nb">any</span> <span class="n">feedback</span> <span class="ow">or</span> <span class="n">questions</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">comments</span><span class="err">!</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">title</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Build</span> <span class="n">a</span> <span class="n">Node</span><span class="o">.</span><span class="n">js</span> <span class="n">API</span> <span class="ow">in</span> <span class="n">Under</span> <span class="mi">30</span> <span class="n">Minutes</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">11</span><span class="n">T16</span><span class="p">:</span><span class="mi">50</span><span class="p">:</span><span class="mi">51</span><span class="o">-</span><span class="mo">07</span><span class="p">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">id</span><span class="o">&gt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">scottdomes</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">build</span><span class="o">-</span><span class="n">a</span><span class="o">-</span><span class="n">node</span><span class="o">-</span><span class="n">dot</span><span class="o">-</span><span class="n">js</span><span class="o">-</span><span class="n">api</span><span class="o">-</span><span class="ow">in</span><span class="o">-</span><span class="n">under</span><span class="o">-</span><span class="mi">30</span><span class="o">-</span><span class="n">minutes</span><span class="o">&lt;/</span><span class="nb">id</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">content</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;</span><span class="err">!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Node</span><span class="o">.</span><span class="n">js</span> <span class="n">can</span> <span class="n">be</span> <span class="n">intimidating</span> <span class="n">to</span> <span class="n">beginners</span><span class="o">.</span> <span class="n">But</span> <span class="n">its</span> <span class="n">flexible</span> <span class="n">structure</span> <span class="ow">and</span> <span class="n">lack</span> <span class="n">of</span>
</span><span class='line'><span class="n">strict</span> <span class="n">guidelines</span> <span class="n">makes</span> <span class="n">it</span> <span class="n">seem</span> <span class="n">more</span> <span class="n">complicated</span> <span class="n">than</span> <span class="n">it</span> <span class="ow">is</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">This</span> <span class="n">tutorial</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">quick</span> <span class="ow">and</span> <span class="n">simple</span> <span class="n">guide</span> <span class="n">to</span> <span class="n">Node</span><span class="o">.</span><span class="n">js</span><span class="p">,</span> <span class="n">the</span> <span class="n">Express</span> <span class="n">framework</span><span class="p">,</span> <span class="ow">and</span>
</span><span class='line'><span class="n">MongoDB</span><span class="p">,</span> <span class="n">focusing</span> <span class="n">on</span> <span class="n">the</span> <span class="n">fundamental</span> <span class="n">REST</span> <span class="n">routes</span> <span class="ow">and</span> <span class="n">basic</span> <span class="n">database</span> <span class="n">interaction</span><span class="o">.</span>
</span><span class='line'><span class="n">You</span><span class="err">’</span><span class="n">ll</span> <span class="n">build</span> <span class="n">a</span> <span class="n">simple</span> <span class="n">API</span> <span class="n">boilerplate</span> <span class="n">that</span> <span class="n">can</span> <span class="n">then</span> <span class="n">be</span> <span class="n">used</span> <span class="k">as</span> <span class="n">the</span> <span class="n">foundation</span>
</span><span class='line'><span class="k">for</span> <span class="nb">any</span> <span class="n">app</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://cdn-images-1.medium.com/max/800/1*s5LVdcugM62xzSvGUpTLWA.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">!</span><span class="o">--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">Who</span> <span class="n">This</span> <span class="n">Tutorial</span> <span class="n">Is</span> <span class="n">For</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">:</span> <span class="n">You</span> <span class="n">should</span> <span class="n">have</span> <span class="n">a</span> <span class="n">basic</span> <span class="n">understanding</span> <span class="n">of</span> <span class="n">REST</span> <span class="n">APIs</span>
</span><span class='line'><span class="ow">and</span> <span class="n">CRUD</span> <span class="n">operations</span><span class="p">,</span> <span class="n">plus</span> <span class="n">basic</span> <span class="n">JavaScript</span> <span class="n">knowledge</span><span class="o">.</span> <span class="n">I</span> <span class="n">use</span> <span class="n">ES6</span> <span class="p">(</span><span class="n">mainly</span>
</span><span class='line'><span class="n">fat</span><span class="o">-</span><span class="n">arrow</span> <span class="n">functions</span><span class="p">),</span> <span class="n">but</span> <span class="n">nothing</span> <span class="n">too</span> <span class="nb">complex</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">this</span> <span class="n">tutorial</span><span class="p">,</span> <span class="n">you</span><span class="err">’</span><span class="n">ll</span> <span class="n">create</span> <span class="n">the</span> <span class="n">skeleton</span> <span class="n">of</span> <span class="n">a</span> <span class="n">back</span><span class="o">-</span><span class="n">end</span> <span class="k">for</span> <span class="n">a</span> <span class="n">note</span><span class="o">-</span><span class="n">taking</span>
</span><span class='line'><span class="n">application</span> <span class="err">—</span> <span class="n">think</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://keep.google.com/&quot;</span><span class="o">&gt;</span><span class="n">Google</span> <span class="n">Keep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.</span> <span class="n">You</span> <span class="n">want</span> <span class="n">to</span> <span class="n">be</span> <span class="n">able</span>
</span><span class='line'><span class="n">to</span> <span class="n">do</span> <span class="nb">all</span> <span class="n">four</span> <span class="n">CRUD</span> <span class="n">actions</span> <span class="n">on</span> <span class="n">your</span> <span class="n">notes</span><span class="p">:</span> <span class="n">create</span><span class="p">,</span> <span class="n">read</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="ow">and</span> <span class="n">delete</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Setting</span> <span class="n">Up</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">you</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">have</span> <span class="n">Node</span> <span class="n">installed</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://howtonode.org/how-to-install-nodejs&quot;</span><span class="o">&gt;</span><span class="n">see</span>
</span><span class='line'><span class="n">here</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">a</span> <span class="n">new</span> <span class="n">directory</span><span class="p">,</span> <span class="n">run</span> <span class="n">npm</span> <span class="n">init</span><span class="p">,</span> <span class="ow">and</span> <span class="n">follow</span> <span class="n">along</span> <span class="k">with</span> <span class="n">the</span> <span class="n">prompts</span><span class="p">,</span> <span class="n">giving</span> <span class="n">your</span>
</span><span class='line'><span class="n">app</span> <span class="n">the</span> <span class="n">name</span> <span class="n">of</span> <span class="err">‘</span><span class="n">notable</span><span class="err">’</span> <span class="p">(</span><span class="ow">or</span> <span class="n">whatever</span> <span class="k">else</span> <span class="n">you</span> <span class="n">might</span> <span class="n">like</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">npm</span> <span class="n">init</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Once</span> <span class="n">that</span><span class="err">’</span><span class="n">s</span> <span class="n">done</span><span class="p">,</span> <span class="n">you</span> <span class="n">should</span> <span class="n">have</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">package</span><span class="o">.</span><span class="n">json</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ready</span> <span class="n">to</span> <span class="n">go</span> <span class="ow">in</span> <span class="n">your</span>
</span><span class='line'><span class="n">directory</span><span class="o">.</span> <span class="n">This</span> <span class="n">means</span> <span class="n">you</span> <span class="n">can</span> <span class="n">start</span> <span class="n">installing</span> <span class="n">the</span> <span class="n">dependencies</span> <span class="n">you</span> <span class="n">need</span> <span class="k">for</span>
</span><span class='line'><span class="n">your</span> <span class="n">project</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span><span class="err">’</span><span class="n">re</span> <span class="n">going</span> <span class="n">to</span> <span class="n">use</span> <span class="n">Express</span> <span class="k">as</span> <span class="n">your</span> <span class="n">framework</span><span class="p">,</span> <span class="n">MongoDB</span> <span class="k">as</span> <span class="n">the</span> <span class="n">database</span><span class="p">,</span> <span class="ow">and</span> <span class="n">a</span>
</span><span class='line'><span class="n">package</span> <span class="n">called</span> <span class="n">body</span><span class="o">-</span><span class="n">parser</span> <span class="n">to</span> <span class="n">help</span> <span class="n">deal</span> <span class="k">with</span> <span class="n">JSON</span> <span class="n">requests</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">--</span><span class="n">save</span> <span class="n">express</span> <span class="n">mongodb</span> <span class="n">body</span><span class="o">-</span><span class="n">parser</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">I</span> <span class="n">also</span> <span class="n">highly</span> <span class="n">recommend</span> <span class="n">installing</span> <span class="n">Nodemon</span> <span class="k">as</span> <span class="n">a</span> <span class="n">dev</span> <span class="n">dependency</span><span class="o">.</span> <span class="n">It</span><span class="err">’</span><span class="n">s</span> <span class="n">a</span> <span class="n">simple</span>
</span><span class='line'><span class="n">little</span> <span class="n">package</span> <span class="n">that</span> <span class="n">automatically</span> <span class="n">restarts</span> <span class="n">your</span> <span class="n">server</span> <span class="n">when</span> <span class="n">files</span> <span class="n">change</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">you</span> <span class="n">run</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span> <span class="n">nodemon</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">then</span> <span class="n">add</span> <span class="n">the</span> <span class="n">following</span> <span class="n">script</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">package</span><span class="o">.</span><span class="n">json</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure> javascript
    // package.json</p>

<pre><code>  "scripts": {
    "dev": "nodemon server.js"
  },
</code></pre>

<pre><code>Your complete *package.json* should look like this:
</code></pre>

<pre><code>// package.json

{
  "name": "notable",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "dev": "nodemon server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.15.2",
    "express": "^4.14.0",
    "mongodb": "^2.2.16"
  },
  "devDependencies": {
    "nodemon": "^1.11.0"
  }
}
</code></pre>

<pre><code>Now you can create your *server.js *file* *and start building your API.

### Our Server

Let’s start by requiring all your dependencies in *server.js.*
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();
</code></pre>

<pre><code>You’re going to use the MongoClient to interact with your database. Note that
you also initialize your app as an instance of Express, your framework.

The last thing you need to do to get your server up and running is to tell your
app to start *listening *for HTTP requests.

You can specify a port, and start the listening like so:
</code></pre>

<pre><code>// server.js

const port = 8000;

app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Now if you run *npm run dev *(or *node server.js* if you didn’t install Nodemon)
you should see ‘We are live on port 8000’ in the terminal.

Your server is live. But it doesn’t do a whole lot. Or anything, really.

Let’s fix that.

### CRUDdy Routes

For this example, you want to build 4 routes; to CREATE a note, to READ your
notes, to UPDATE a note, and to DELETE a note.

This will give you a good idea of how to structure almost any basic route with
Node.

To test your API, though, you need to mimic a client side making requests. To do
so, you’ll use a great app called [Postman](https://www.getpostman.com/). It
allows you to make simple HTTP requests with custom bodies and parameters.

Install Postman, and let’s start setting up your routes.

### Super Organized

Most Node.js tutorials (and many real apps) put all their routes in one big
*routes.js *file. This makes me a wee bit uncomfortable.In contrast, splitting
up your files into separate folders leads to good readability, and makes big
apps more manageable.

You don’t have a big app, but let’s do this right. Make the following
directories: an *app* folder with a routes folder inside it, with an *index.js
*and a* note_routes.js *file inside it.

In other words: root &gt; app &gt; routes &gt; index.js and note_routes.js.
</code></pre>

<pre><code>mkdir app
cd app
mkdir routes
cd routes
touch index.js
touch note_routes.js
</code></pre>

<pre><code>These directories may seem like overkill for your simple small app, but it’s
always good to start with best practices.

### Your First Route

Let’s start with the C in CRUD- create. How would you create a note?

Well, before you do that, you have to build a bit more infrastructure. In
Express, routes are wrapped in a function, which takes the Express instance and
a database as arguments.

Like this:
</code></pre>

<pre><code>// routes/note_routes.js

module.exports = function(app, db) {

};
</code></pre>

<pre><code>You can then export this function through your* index.js*:
</code></pre>

<pre><code>// routes/index.js

const noteRoutes = require('./note_routes');

module.exports = function(app, db) {
  noteRoutes(app, db);
  // Other route groups could go here, in the future
};
</code></pre>

<pre><code>Then import it for use in *server.js:*
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;

app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Note that since you don’t have a database yet set up, you’re just passing in an
empty object.

Okay, *now* you can make your CREATE route.

The syntax is simple:
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
};
</code></pre>

<pre><code>When the app receives a *post *request to the ‘/notes’ path, it will execute the
code inside the callback- passing in a request object (which contains the
parameters or JSON of the request) and a response object (used to reply).

You can test this by using Postman to send a POST request to
localhost:8000/notes.

![](https://cdn-images-1.medium.com/max/800/1*pqIRP6BQSrVCCc6XVPZxPg.png)
You should get the ‘Hello’ back.

Nice! You created your first real route.

Next step is to add some parameters to your request and process them in your API
and, finally, add in your database.

### Request Parameters

In Postman, go to the Body tab and add some key-value pairs, after selecting the
*x-www-form-urlencoded* radio button.

This will add encoded form data to your request, which you’ll be able to process
with your API.

![](https://cdn-images-1.medium.com/max/800/1*z2mIHYqGFYhSJv0x2_caqg.png)
You can try being more creative than me.

Now in your *note_routes.js*, let’s just log out the body.
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.post('/notes', (req, res) =&gt; {
    res.send('Hello')
  });
};
</code></pre>

<pre><code>Try sending the Postman request and you’ll see… undefined.

Unfortunately, Express can’t process URL encoded forms on its own. But you did
install that body-parser package…
</code></pre>

<pre><code>// server.

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;


require('./app/routes')(app, {});
app.listen(port, () =&gt; {
  console.log('We are live on ' + port);
});
</code></pre>

<pre><code>Now you should see the body as an object in the terminal.
</code></pre>

<pre><code>{ title: 'My Note Title', body: 'What a great note.' }
</code></pre>

<pre><code>Last step to your preliminary route: set up the database, and then add your data
in.

The easiest way to set up a Mongo database is through [mLab](https://mlab.com/):
it’s free for the smallest size, and quite fast to setup.

Once you create an account and a MongoDB deployment, add a user to the database
with a username and password:

![](https://cdn-images-1.medium.com/max/800/1*E5ws9QPkraXVwigcdW86nw.png)

then grab the URL here (the second one):

![](https://cdn-images-1.medium.com/max/800/1*kJMlsvyB11W73cO-CioxxA.png)

And in a directory config in the root of your project, create a db.js file.
</code></pre>

<pre><code>mkdir config 
cd config
touch db.js
</code></pre>

<pre><code>Inside, add the URL:
</code></pre>

<pre><code>module.exports = {
  url : YOUR URL HERE
};
</code></pre>

<pre><code>Don’t forget to add your username and password (the ones from the database user,
not your mLab account) into the URL. (If you’re committing this project to
Github, be sure to include a .gitignore file [like
so](https://github.com/scottdomes/notable-node-api-tutorial/blob/master/.gitignore),
so you don’t share your password with everyone.)

Now in your *server.js*, you can use the MongoClient to connect to your DB, and
use this to wrap your app setup:
</code></pre>

<pre><code>// server.js

const express        = require('express');
const MongoClient    = require('mongodb').MongoClient;
const bodyParser     = require('body-parser');

const app            = express();

const port = 8000;

app.use(bodyParser.urlencoded({ extended: true }));
</code></pre>

<pre><code>

That’s the last of your infrastructure setup! It’s all route-building from here.

### Adding to your Database

MongoDB stores data in *collections*- which are exactly how they sound. In your
case, you want to store your notes in a collection called — you guessed it —
notes.

Since you pass in your database as the *db *argument in your routes, you can
then access it like so:
</code></pre>

<pre><code>db.collection('notes')
</code></pre>

<pre><code>Creating a note is as simple as calling *insert *on your collection:
</code></pre>

<pre><code>const note = { text: req.body.body, title: req.body.title}
  db.collection('notes').insert(note, (err, results) =&gt; {
}
</code></pre>

<pre><code>Once the insert is complete (or has failed for whatever reason), you want to
either send back an error or send back the newly created note object. Here’s the
full *note_routes.js:*
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
    });
  });
};
</code></pre>

<pre><code>Try it out! Send an x-www-form-urlencoded POST request with Postman, with a
*title *and *body *set under the Body tab.

The response should look like this:

![](https://cdn-images-1.medium.com/max/800/1*YcGwoqOpRkQEo-N0W_-WEA.png)

If you log into mLab, you should also see the created note in the database.

### Your READ Route

Now you can pick up the pace a bit.

Say you wanted to get back the note you just created, by navigating to
localhost:8000/notes/{the id}. In this case, that would be
localhost:8000/notes/585182bd42ac5b07a9755ea3.

(If you don’t have the ID for one of your notes, you can check on mLab or just
create a new one).

Here’s what this would look like in *note_routes.js*:
</code></pre>

<pre><code>// note_routes.js

module.exports =
function(app, db) {

  app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>Just like before, you’re going to call a method on your database collection of
notes. Here, it’s the aptly named findOne.
</code></pre>

<pre><code>// note_routes.js

module.exports = function(app, db) {
  app.get('/notes/:id', (req, res) =&gt; {
  });

app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>You can grab the id from the URL parameters via *req.params.id*. However, if you
try to just plop in the string into the &lt;&gt; above, it won’t work.

MongoDB requires not just an ID as a *string*, but as an ID *object* or, as they
call it, an ObjectID.

Don’t worry, it’s an easy fix. Here’s the full code:
</code></pre>

<pre><code>// note_routes.js


module.exports = function(app, db) {
  app.get('/notes/:id', (req, res) =&gt; {
    db.collection('notes').findOne(details, (err, item) =&gt; {
      if (err) {
        res.send({'error':'An error has occurred'});
      } else {
        res.send(item);
      } 
    });
  });

app.post('/notes', (req, res) =&gt; {
    const note = { text: req.body.body, title: req.body.title };
    db.collection('notes').insert(note, (err, result) =&gt; {
      if (err) { 
        res.send({ 'error': 'An error has occurred' }); 
      } else {
        res.send(result.ops[0]);
      }
    });
  });
};
</code></pre>

<pre><code>Try it out with one of your note ID’s, and it should look like this:

### Your DELETE Route

Deleting an object is actually pretty much the same as finding an object. You
just use the *remove* function instead of the *findOne*. Here’s the full code.
I’ve highlighted what’s different from your GET:
</code></pre>

<pre><code>// note_routes.js

// ...

  app.
('/notes/:id', (req, res) =&gt; {
    const id = req.params.id;
    const details = { '_id': new ObjectID(id) };
    db.collection('notes').
(details, (err, item) =&gt; {
      if (err) {
        res.send({'error':'An error has occurred'});
      } else {
      } 
    });
  });

// ...
</code></pre>

<pre><code>### **Your UPDATE Route**

Last one! The PUT is basically a hybrid between READ and CREATE. You find the
object, then update it accordingly. If you deleted your only note, time to make
another one!

The code:
</code></pre>

<pre><code>// note_routes.js

// ...

  app.
('/notes/:id', (req, res) =&gt; {
      if (err) {
          res.send({'error':'An error has occurred'});
      } else {
          res.send(note);
      } 
    });
  });

// ...
</code></pre>

<p>```
Now you can update any of your notes, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*LZ1DzuxzAJAyNYjO4sZcmg.png" alt="" /></p>

<p>Note the imperfection with this code- if you fail to supply a body or title, the
PUT request will nullify those fields on the note in the database.</p>

<p>You could easily add some conditional logic to update the fields only if they’re
present in the request- I left that out just to keep it simple.</p>

<h3>API Complete</h3>

<p>That’s it! You have a working Node API with each of the four major CRUD
operations.</p>

<p>The goal of this tutorial was to give you a degree of familiarity with Express,
Node, and MongoDB — you can use your simple app as a launching pad for more
complex projects.</p>

<p>In the future I’ll be writing tutorials to create more simple API’s in different
languages and frameworks.</p>

<p>If this tutorial was any help to you, please share it with friends and colleagues- it means
a lot. Feel free to also leave me a comment with any feedback or questions.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Benchmark React Components: The Quick and Dirty Guide]]></title>
    <link href="http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide/"/>
    <updated>2017-08-11T16:50:37-07:00</updated>
    <id>http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide</id>
    <content type="html"><![CDATA[<p>A React Component works hard. As the user manipulates the state of the
application, it may re-render 5, 10, 100 times. Sometimes, that’s a good thing.
But if you don’t understand what is causing the re-renders, and whether they are
necessary, your app could suffer serious slowdown.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*VDZqVFTK09inhHpjKJpXpw.png" alt="" /></p>

<!--more-->


<h3>A Tale of Two Tables</h3>

<p>A few months after I started at MuseFind, we embarked on a rewrite of our
internal software. The key piece in this application was a table that allowed
our customer success team toquickly edit, add, and manage collaborations across
all influencer marketing campaigns on our platform.</p>

<p>The purpose of this rewrite was to improve our team’s efficiency — speed was the
name of the game. But as the table grew in complexity (more and more
subcomponents for each row, with inputs and date inputs and buttons), it became
more and more slow. Slow to update, slow to reload — just a pain to use.</p>

<p>The solution was to carefully measure the render time of the subcomponents and
of the table as a whole, and then begin experimenting. Over time, we managed to
cut the table render time to a third of what it was.</p>

<p>In this article I’ll take you on a quick tour of React’s performance tools, and
how to eliminate wasted renders.</p>

<p>Let’s get started.</p>

<h3>How To Benchmark A React Component</h3>

<p>We’ll use a simple example: an app that renders a list of 10,000 numbers.</p>

<p>Half the numbers in the list — 1 to 5,000- are simply generated by incrementing.
The other half, in a separate array, are generated by incrementing and then
multiplying by a number stored in the app’s state.</p>

<p>So if the <em>this.state.multiplier</em> is 2, the second array would be 2, 4, 6 … etc
up to 10,000.</p>

<p>To change the multiplier from the default of 1, we click a button.</p>

<p><div><script src='https://gist.github.com/e282df91443f92dc24345c136fd5e225.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import &#39;./App.css&#39;
import ListItem from &#39;./ListItem&#39;

function arrayGenerator(length) {
  return Array.apply(null, { length: length }).map(Number.call, Number)
}

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      multiplier: 1
    }
  }
  
  resetMultiplier() {
    this.setState({ multiplier: 2 })
  }

  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;button onClick={this.resetMultiplier.bind(this)}&gt;Click Me&lt;/button&gt;
        &lt;ul&gt;
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i}/&gt;
            })
          }
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i + this.state.multiplier}/&gt;
            })
          }
        &lt;/ul&gt;
      &lt;/div&gt;
    );
  }
}

export default App
</code></pre></noscript></div>
</p>

<p>When clicking the button, only the second array of ListItems should re-render —
only they are affected by the change. Yet we’re experiencing slowness, so we
want to investigate whether everything is as it should be.</p>

<h3>Measuring Update Time</h3>

<p>We’ll start by installing React’s performance tools.
<code>
npm install --save-dev react-addons-perf
</code>
And then we can import it in our App.js:
<code>javascript
    import Perf from 'react-addons-perf'
</code>
There are four Perf functions that we care about:</p>

<ul>
<li>Perf.start(): start measuring performance.</li>
<li>Perf.stop()</li>
<li>Perf.printExclusive(): prints total rendering time for components.</li>
<li>Perf.printWasted(): prints wasted renders- we’ll get to this shortly.</li>
</ul>


<p>We want to start measuring render time before our component starts updating-
before we call <em>setState()</em>. Then we can stop the measurement and print the
results using the lifecycle method <em>componentDidUpdate()</em>.</p>

<p><div><script src='https://gist.github.com/1d699da138bd651f1993127cc8028b70.js'></script>
<noscript><pre><code>  componentDidUpdate() {
    Perf.stop()
    Perf.printInclusive()
    Perf.printWasted()
  }

  resetMultiplier() {
    Perf.start()
    this.setState({ multiplier: 2 })
  }</code></pre></noscript></div>
</p>

<p>Here’s what our console will look like after clicking the button:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*SxJEEnK8C4sJTdIAnzvmVg.png" alt="" /></p>

<p>Our App renders took 94.75ms to render, and rendered only once.</p>

<p>Our ListItem component took 53.84ms, and rendered 10,000 times (this is
including all instances of the components, not individual render time).</p>

<p>In the second table, we can see ‘wasted’ time — when the component re-rendered
but nothing had actually changed.</p>

<p>We have 5,000 wasted ListItem renders. Not good.</p>

<p>These renders are ‘wasted’ in the sense that only the ListItems affected by the
multiplier will have their render actually changed when we click the button.
There’s no point in having them re-render.</p>

<h3>Fixing Wasted Renders</h3>

<p>Fortunately, React furnishes us with a handy lifecycle method called
<em>shouldComponentUpdate()</em> for these types of situations.</p>

<p>It gives us fine-grained control of when our component will re-render.</p>

<p>We can check for certain conditions, returning a boolean that React uses to
determine whether it will call <em>render()</em> on the component, or leave it as is.</p>

<p>Here’s what it would look like for ListItem:</p>

<p><div><script src='https://gist.github.com/35e739f94d338031acea59c04de42fbd.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;

export default class ListItem extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.text !== this.props.text  
  }

  render() {
    let { text } = this.props
    return &lt;li&gt;{text}&lt;/li&gt;
  }
}</code></pre></noscript></div>
</p>

<p>If the text prop hasn’t changed, there’s no reason to change the component’s
appearance via a re-render.</p>

<p><em>Note that we don’t use the nextState argument in shouldComponentUpdate()- I
left it there for reference.</em></p>

<p>Now let’s re-run our Perf.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*45uzx4SZL67IgaWNGmIM1A.png" alt="" /></p>

<p>We’ve cut our total render time down by 30ms, and eliminated all wasteful
renders.</p>

<h3>Using Perf in the Real World</h3>

<p>Most of the components you’ll be benchmarking won’t be nearly this simple. But
the Perf tools are a valuable way to identify which components are problems.</p>

<p>Here’s an example of <em>Perf.printWasted()</em> from MuseFind’s administrative table
component:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*2Drc_MtkAZexMuuXhBb4Vw.png" alt="" /></p>

<p>These wasted times aren’t long at all, thankfully — but you can see that of the
wasteful renders, the Header component is the main problem, with its
subcomponents Toolbar and PopoverMenu accounting for almost all of the wasted
render time.</p>

<p>Those two components are prime candidates for adding <em>shouldComponentUpdate()</em>.</p>

<h3>Bonus: Benchmarking Initial Renders</h3>

<p>Sometimes you want to not just benchmark when the component updates, but also
how long it takes to render completely the first time around.</p>

<p>In short, we want to measure the time between <em>componentWillMount() </em>and
<em>componentDidMount().</em></p>

<p><em>Perf.start()</em> can’t be placed in the <em>componentWillMount(), </em>however, so we’ll
have to be a little more manual.</p>

<p><div><script src='https://gist.github.com/4f4889a9c600ce31d6f48e2304d5f033.js'></script>
<noscript><pre><code>  componentWillMount() {
    window.performance.mark(&#39;App&#39;)
  }

  componentDidMount() {
    console.log(window.performance.now(&#39;App&#39;))
  }</code></pre></noscript></div>
</p>

<p>This will give you a logged out time in milliseconds- not as fancy as Perf, but
a useful metric for how long it takes to boot up your app.</p>

<h3>Final Notes</h3>

<p>As the docs page <a href="https://facebook.github.io/react/docs/perf.html">proudly
proclaims</a>, React is fast as it
is.</p>

<p>However, that doesn’t mean it’s free from performance slowdowns caused by
unnecessary re-renders — especially in complex apps with hundreds of children.</p>

<p>Using Perf on high-level components can give you an idea of which children are
the problem, so you can keep your app quick and snappy.</p>

<p>I hope this article has been useful — if it has, let me know by hitting the
green heart below.</p>

<p>If you have any questions or feedback, let me know in the comments — thanks for
reading.</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>

<p>Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter — subscribe through the above link.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Design | Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/blog/categories/web-design/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-08-16T17:48:49-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Flexbox Works — Explained With Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs/"/>
    <updated>2017-08-11T16:52:52-07:00</updated>
    <id>http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs</id>
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/1*zyzR64aw4rDPsoG-ZwZ9rQ.png" alt="" /></p>

<p>Flexbox promises to save us from the evils of plain CSS (like vertical
alignment).</p>

<p>Well, Flexbox does deliver on that goal. But mastering its new mental model can
be challenging.</p>

<p>So let’s take an animated look at how Flexbox works, so we can use it to build
better layouts.</p>

<!--more-->


<p>Flexbox’s underlying principle is to make layouts flexible and intuitive.</p>

<p>To accomplish this, it lets containers decide for themselves how to evenly
distribute their children — including their size and the space between them.</p>

<p>This all sounds good in principle. But let’s see what it looks like in practice.</p>

<p>In this article, we’ll dive into the 5 most common Flexbox properties. We’ll
explore what they do, how you can use them, and what their results will actually
look like.</p>

<h3>Property #1: Display: Flex</h3>

<p>Here’s our example webpage:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*ifusEqwI87nBKXgK9oZ_7A.gif" alt="" /></p>

<p>You have four colored divs of various sizes, held within a grey container div.
As of now, each div has defaulted to . Each square thus takes up the full width
of its line.</p>

<p>In order to get started with Flexbox, you need to make your <strong>container</strong> into a
<strong>flex container</strong>. This is as easy as:</p>

<pre><code class="css">#container {
  display: flex;
}
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*L2W-ziqU45a1BNWV79ijDQ.gif" alt="" /></p>

<p>Not a lot has changed — your divs are displayed inline now, but that’s about it.
But behind the scenes, you’ve done something powerful. <strong>You gave your squares
something called a flex context.</strong></p>

<p>You can now start to position them within that context, with far less difficulty
than traditional CSS.</p>

<h3>Property #2: Flex Direction</h3>

<p>A Flexbox container has two axes: <strong>a main axis</strong> and <strong>a cross axis</strong>, which
default to looking like this:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png" alt="" /></p>

<p><strong>By default, items are arranged along the main axis, from left to right</strong>. This
is why your squares defaulted to a horizontal line once you applied <code>display: flex</code>.</p>

<p><code>flex-direction</code>, however, let’s you rotate the main axis.</p>

<pre><code class="css">#container {
  display: flex;
  flex-direction: column;
}
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*4yKnG2-vuPF5XA-BmXADLQ.gif" alt="" /></p>

<p>There’s an important distinction to make here: <code>flex-direction: column</code> doesn’t align the squares on the
cross axis instead of the main axis.<strong> It makes the main axis itself go from
horizontal to vertical.</strong></p>

<p>There are a couple of other options for flex-direction, as well: <em>row-reverse
</em>and <em>column-reverse.</em></p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*PBr_ncouIehALaEOWmSbpQ.gif" alt="" /></p>

<h3>Property #3: Justify Content</h3>

<p><em>Justify-content</em> controls how you align items on the <strong>main axis.</strong></p>

<p>Here, you’ll dive a bit deeper into the main/cross axis distinction. First,
let’s go back to flex-direction: row.</p>

<pre><code class="css">#container {
  display: flex;
  flex-direction: row;
}
</code></pre>

<p>You have five commands at your disposal to use <em>justify-content</em>:</p>

<ol>
<li>Flex-start</li>
<li>Flex-end</li>
<li>Center</li>
<li>Space-between</li>
<li>Space-around</li>
</ol>


<p><img src="https://cdn-images-1.medium.com/max/1000/1*2-6Tw8jqWrMKOfIugKyuDA.gif" alt="" /></p>

<p>Space-around and space-between are the least intuitive. <strong>Space-between gives
equal space between each square, but not between it and the container.</strong></p>

<p>Space-around puts an equal cushion of space on either side of the square — which
means <strong>the space between the outermost squares and the container is half as
much as the space between two squares</strong> (each square contributing a
non-overlapping equal amount of margin, thus doubling the space).</p>

<p>A final note: remember that<strong> justify-content works along the main-axis</strong>, and
<strong>flex-direction switches the main-axis</strong>. This will be important as you move
to…</p>

<h3>Property #4: Align Items</h3>

<p>If you ‘get’ justify-content, align-items will be a breeze.</p>

<p>As justify-content works along the main axis,<strong> align-items applies to the cross
axis.</strong></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png" alt="" /></p>

<p>Let’s reset our <em>flex-direction</em> to row, so our axes look the same as the above
image.</p>

<p>Then, let’s dive into the align-items commands.</p>

<ol>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch</li>
<li>baseline</li>
</ol>


<p>The first three are exactly the same as <em>justify-content</em>, so nothing too fancy
here.</p>

<p>The next two are a bit different, however.</p>

<p>You have stretch, in which the items take up the entirety of the cross-axis, and
baseline, in which the bottom of the paragraph tags are aligned.</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*htfdNmRIIFu_veRaFOj5qA.gif" alt="" /></p>

<p>(Note that for , I had to set the height of the squares to auto. Otherwise the
height property would override the stretch.)</p>

<p>For baseline, be aware that if you take away the paragraph tags, it aligns the
bottom of the squares instead, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*6dd9KnKMUN49lFsbHlJi6A.png" alt="" /></p>

<p>To demonstrate the main and cross axes better, let’s combine justify-content and
align-items and see how centering works different for the two flex-direction
commands:</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*6mq-Uay7t6NhdF2E41Do0g.gif" alt="" /></p>

<p><strong>With row, the squares are set up along a horizontal main axis. With column,
they fall along a vertical main axis.</strong></p>

<p>Even if the squares are centered both vertically and horizontally in both cases,
the two are not interchangeable!</p>

<h3>Property #5: Align Self</h3>

<p><em>Align-self</em> allows you to manually manipulate the alignment of one particular
element.</p>

<p>It’s basically overriding <em>align-items</em> for one square. All the properties are
the same, though it defaults to <em>auto</em>, in which it follows the <em>align-items</em> of
the container.</p>

<pre><code class="css">#container {
  align-items: flex-start;
}

.square#one {
  align-self: center;
}
// Only this square will be centered.
</code></pre>

<p>Let’s see what this looks like. You’ll apply <em>align-self</em> to two squares, and
for the rest apply <code>align-items: center</code> and <code>flex-direction: row</code>.</p>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*HIADl1oL6pxXb2dMh_pXSQ.gif" alt="" /></p>

<h3>Conclusion</h3>

<p>Even though we’ve just scratched the surface of Flexbox, these commands should
be enough for you to handle most basic alignments — and to vertically align to
your heart’s content.</p>

<p>If you want to see more GIF Flexbox tutorials, or if this tutorial was helpful
to you, hit the green heart below or leave a comment.</p>

<p>Thanks for reading!</p>

<p><em>Article originally published on freeCodeCamp&rsquo;s Medium publication.</em> <a href="https://medium.freecodecamp.org/an-animated-guide-to-flexbox-d280cf6afc35">View Original</a></p>
]]></content>
  </entry>
  
</feed>

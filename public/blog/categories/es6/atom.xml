<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Es6 | Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/blog/categories/es6/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-09-07T08:11:02-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Our Best Practices for Writing React Components]]></title>
    <link href="http://scottdomes.com/blog/our-best-practices-for-writing-react-components/"/>
    <updated>2017-08-11T16:51:15-07:00</updated>
    <id>http://scottdomes.com/blog/our-best-practices-for-writing-react-components</id>
    <content type="html"><![CDATA[<p>When I first started writing React, I remember seeing many different
approaches to writing components, varying greatly from tutorial to tutorial.
Though the framework has matured considerably since then, there doesn’t seem to
yet be a firm ‘right’ way of doing things.</p>

<p>Over the past year at <a href="https://musefind.com/">MuseFind</a>, our team has written a
lot of React components. We’ve gradually refined our approach until we’re happy
with it.</p>

<p>This guide represents our suggested best practices. We hope it will be useful,
whether you’re a beginner or experienced.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*GEniDHmmO0nkVuKQ8fhLYw.png" alt="" /></p>

<!--more-->


<p>Before we get started, a couple of notes:</p>

<ul>
<li>We use ES6 and ES7 syntax.</li>
<li>If you’re not sure of the distinction between presentational and container
components, we recommend you <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kuvqndiqq">read this
first</a>.</li>
<li>Please let us know in the comments if you have any suggestions, questions, or
feedback.</li>
</ul>


<h3>Class Based Components</h3>

<p>Class based components are stateful and/or contain methods. We try to use them
as sparingly as possible, but they have their place.</p>

<p>Let’s incrementally build our component, line by line.</p>

<h4>Importing CSS</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>I like <a href="https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55">CSS in
JavaScript</a>,
I do — in theory. But it’s still a new idea, and a mature solution hasn’t
emerged. Until then, we import a CSS file to each component.</p>

<p>We also separate our dependency imports from local imports by a newline.</p>

<h4>Initializing State</h4>

<pre><code class="javascript">    import 
    , { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'
</code></pre>

<p>You can also use the older approach of initializing state in the constructor.
More on that
<a href="http://stackoverflow.com/questions/35662932/react-constructor-es6-vs-es7">here</a>.
We prefer the cleaner way.</p>

<p>We also make sure to export our class as the default.</p>

<h4>propTypes and defaultProps</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
</code></pre>

<p>propTypes and defaultProps are static properties, declared as high as possible
within the component code.They should be immediately visible to other devs
reading the file, since they serve as documentation.</p>

<p>If using React 15.3.0 or higher, use the
<a href="https://github.com/reactjs/prop-types">prop-types</a> package instead of
React.PropTypes — nicely destructured, of course.</p>

<p>All your components should have propTypes.</p>

<h4>Methods</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }

      static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
      }
</code></pre>

<p>With class components, when you pass methods to subcomponents, you have to
ensure that they have the right <em>this** </em>when they’re called.This is usually
achieved by passing <em>this.handleSubmit.bind(this)</em> to the subcomponent.</p>

<p>We think this approach is cleaner and easier, maintaining the correct context
automatically via the ES6 arrowfunction.</p>

<h4><strong>Passing setState a Function</strong></h4>

<p>In the above example, we do this:
<code>javascript
this.setState({ expanded: !this.state.expanded })
</code>
Here’s the dirty secret about setState — it’s actually asynchronous. React
batches state changes for performance reasons, so the state may not change
immediately after setState is called.</p>

<p>That means you should not rely on the current state when calling setState —
since you can’t be sure what that state will be!</p>

<p>Here’s the solution — pass a function to setState, with the previous state as an
argument.</p>

<pre><code class="javascript">this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
</code></pre>

<p>(Thanks to <a href="https://medium.com/@indiesquidge">Austin Wood</a> for his help with
this section).</p>

<h4>Destructuring Props</h4>

<pre><code class="javascript">    import React, { Component } from 'react'
    import { observer } from 'mobx-react'
    import { string, object } from 'prop-types'

    import ExpandableForm from './ExpandableForm'
    import './styles/ProfileContainer.css'

    export default class ProfileContainer extends Component {
      state = { expanded: false }
     static propTypes = {
        model: object.isRequired,
        title: string
      }

      static defaultProps = {
        model: {
          id: 0
        },
        title: 'Your Name'
      }

    handleSubmit = (e) =&gt; {
        e.preventDefault()
        this.props.model.save()
      }

      handleNameChange = (e) =&gt; {
        this.props.model.changeName(e.target.value)
      }

      handleExpand = (e) =&gt; {
        e.preventDefault()
        this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
      }

    }
</code></pre>

<p>Components with many props should have each prop on a newline, like above.</p>

<h4>Decorators</h4>

<pre><code>export default class ProfileContainer extends Component {
</code></pre>

<p>If you’re using something like <a href="https://github.com/mobxjs/mobx">mobx</a>, you can
decorate your class components like so — which is the same as passing the
component into a function.</p>

<p><a href="http://javascript.info/tutorial/decorators">Decorators</a> are flexible and
readable way of modifying component functionality.We use them extensively, with
mobx and our own <a href="https://github.com/musefind/mobx-models">mobx-models</a> library.</p>

<p>If you don’t want to use decorators, do the following:</p>

<pre><code class="javascript">    class ProfileContainer extends Component {
      // Component code
    }

    export default observer(ProfileContainer)
</code></pre>

<h4>Closures</h4>

<p>Avoid passing new closures to subcomponents, like so:</p>

<pre><code class="html">              &lt;input
                type="text"
                value={model.name}
                // onChange={(e) =&gt; { model.name = e.target.value }}
                // 

                placeholder="Your Name"/&gt;
</code></pre>

<p>Here’s why: every time the parent component renders, a new function is created
and passed tothe input.</p>

<p>If the input were a React component, this would automatically trigger it to
re-render, regardless of whether its other props have actually changed.</p>

<p>Reconciliation is the most expensivepart of React. Don’t make it harder than it
needs to be! Plus, passing aclass method is easier to read, debug, and change.</p>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/70e436951dfeeb82dfdd4aa6d2541dce.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { string, object } from &#39;prop-types&#39;
// Separate local imports from dependencies
import ExpandableForm from &#39;./ExpandableForm&#39;
import &#39;./styles/ProfileContainer.css&#39;

// Use decorators if needed
@observer
export default class ProfileContainer extends Component {
  state = { expanded: false }
  // Initialize state here (ES7) or in a constructor method (ES6)
 
  // Declare propTypes as static properties as early as possible
  static propTypes = {
    model: object.isRequired,
    title: string
  }

  // Default props below propTypes
  static defaultProps = {
    model: {
      id: 0
    },
    title: &#39;Your Name&#39;
  }

  // Use fat arrow functions for methods to preserve context (this will thus be the component instance)
  handleSubmit = (e) =&gt; {
    e.preventDefault()
    this.props.model.save()
  }
  
  handleNameChange = (e) =&gt; {
    this.props.model.name = e.target.value
  }
  
  handleExpand = (e) =&gt; {
    e.preventDefault()
    this.setState(prevState =&gt; ({ expanded: !prevState.expanded }))
  }
  
  render() {
    // Destructure props for readability
    const {
      model,
      title
    } = this.props
    return ( 
      &lt;ExpandableForm 
        onSubmit={this.handleSubmit} 
        expanded={this.state.expanded} 
        onExpand={this.handleExpand}&gt;
        // Newline props if there are more than two
        &lt;div&gt;
          &lt;h1&gt;{title}&lt;/h1&gt;
          &lt;input
            type=&quot;text&quot;
            value={model.name}
            // onChange={(e) =&gt; { model.name = e.target.value }}
            // Avoid creating new closures in the render method- use methods like below
            onChange={this.handleNameChange}
            placeholder=&quot;Your Name&quot;/&gt;
        &lt;/div&gt;
      &lt;/ExpandableForm&gt;
    )
  }
}</code></pre></noscript></div>
</p>

<h3>Functional Components</h3>

<p>These components have no state and no methods.They’re pure, and easy to reason
about. Use them as often as possible.</p>

<h4>propTypes</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool
    }

    // Component declaration
</code></pre>

<p>Here, we assign the propTypes before the component declaration, so they are
immediately visible. We’re able to do this because of JavaScript function
hoisting.</p>

<h4>Destructuring Props and defaultProps</h4>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }
</code></pre>

<p>Our component is a function, which takes its props as its argument. We can
expand them like so:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Note we can also use default arguments to act as defaultProps in a highly
readable manner. If expanded is undefined, we set it to false. (A bit of a
forced example, since it’s a boolean, but very useful for avoiding ‘Cannot read
<property> of undefined’ errors with objects).</p>

<p>Avoid the following ES6 syntax:</p>

<pre><code class="javascript">const ExpandableForm = ({ onExpand, expanded, children }) =&gt; {
</code></pre>

<p>Looks very modern, but the function here is actually unnamed.</p>

<p>This lack of name will not be a problem if your Babel is set up correctly — but
if it’s not, any errors will show up as occurring in &lt;<anonymous>> which is
terrible for debugging.</p>

<p>Unnamed functions can also cause problems with Jest, a React testing library.
Due to the potential for difficult-to-understand bugs (and the lack of real
benefit) we recommend using <em>function </em>instead of<em> const.</em></p>

<h4>Wrapping</h4>

<p>Since you can’t use decorators with functional components, you simply pass it
the function in as an argument:</p>

<pre><code class="javascript">    import React from 'react'
    import { observer } from 'mobx-react'
    import { func, bool } from 'prop-types'

    import './styles/Form.css'

    ExpandableForm.propTypes = {
      onSubmit: func.isRequired,
      expanded: bool,
      onExpand: func.isRequired
    }

    function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
      const formStyle = expanded ? {height: 'auto'} : {height: 0}
      return (
        &lt;form style={formStyle} onSubmit={onSubmit}&gt;
          {children}
          &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
        &lt;/form&gt;
      )
    }
</code></pre>

<p>Here’s our full component:</p>

<p><div><script src='https://gist.github.com/19d4ade69b1a3978730b104558fb5308.js'></script>
<noscript><pre><code>import React from &#39;react&#39;
import { observer } from &#39;mobx-react&#39;
import { func, bool } from &#39;prop-types&#39;
// Separate local imports from dependencies
import &#39;./styles/Form.css&#39;

// Declare propTypes here, before the component (taking advantage of JS function hoisting)
// You want these to be as visible as possible
ExpandableForm.propTypes = {
  onSubmit: func.isRequired,
  expanded: bool,
  onExpand: func.isRequired
}

// Destructure props like so, and use default arguments as a way of setting defaultProps
function ExpandableForm({ onExpand, expanded = false, children, onSubmit }) {
  const formStyle = expanded ? { height: &#39;auto&#39; } : { height: 0 }
  return (
    &lt;form style={formStyle} onSubmit={onSubmit}&gt;
      {children}
      &lt;button onClick={onExpand}&gt;Expand&lt;/button&gt;
    &lt;/form&gt;
  )
}

// Wrap the component instead of decorating it
export default observer(ExpandableForm)</code></pre></noscript></div>
</p>

<h3>Conditionals in JSX</h3>

<p>Chances are you’re going to do a lot of conditional rendering. Here’s what you
want to avoid:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*4zdSbYcOXTVchgSJqtk0Ig.png" alt="" />
^ Actual code I wrote in my early days at MuseFind… forgive me</p>

<p>No,nested ternaries are not a good idea.</p>

<p>There are some libraries that solve this problem (<a href="https://github.com/AlexGilleran/jsx-control-statements">JSX-Control
Statements</a>), but rather
than introduce another dependency, we settled on this approach for complex
conditions:</p>

<p>A refactored version of the above:
<img src="https://cdn-images-1.medium.com/max/800/1*IVFlMaSGKqHISJueTC26sw.png" alt="" /></p>

<p>Use curly braces wrapping an
<a href="http://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript">IIFE</a>,
and then put your if statements inside, returning whatever you want to render.
Note that IIFE’s like this can cause a performance hit, but in most cases it
will not be significant enough to warrant losing the readability factor.</p>

<p><strong>Update: </strong>Many commenters have recommended extracting this logic to a
subcomponent that conditionally returns different buttons based on props.They’re
right — splitting up your components as much as possible is always a good call.
But keep the IIFE approach in mind as a fallback for quick conditionals.</p>

<p>Also, when you only want to render an element on one condition, instead of doing
this…</p>

<pre><code class="javascript">    {
      isTrue
       ? &lt;p&gt;True!&lt;/p&gt;
       : &lt;none/&gt;
    }
</code></pre>

<p>… use short-circuit evaluation:</p>

<pre><code class="javascript">{
  isTrue &amp;&amp; 
    &lt;p&gt;True!&lt;/p&gt;
}
</code></pre>

<h3>Conclusion</h3>

<p>Was this article useful? Share it with your friends and fellow devs.</p>

<p>Have any feedback? Leave a comment below.</p>

<p>Thanks for reading!</p>

<p>(Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter—subscribe below.)</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Benchmark React Components: The Quick and Dirty Guide]]></title>
    <link href="http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide/"/>
    <updated>2017-08-11T16:50:37-07:00</updated>
    <id>http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide</id>
    <content type="html"><![CDATA[<p>A React Component works hard. As the user manipulates the state of the
application, it may re-render 5, 10, 100 times. Sometimes, that’s a good thing.
But if you don’t understand what is causing the re-renders, and whether they are
necessary, your app could suffer serious slowdown.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*VDZqVFTK09inhHpjKJpXpw.png" alt="" /></p>

<!--more-->


<h3>A Tale of Two Tables</h3>

<p>A few months after I started at MuseFind, we embarked on a rewrite of our
internal software. The key piece in this application was a table that allowed
our customer success team toquickly edit, add, and manage collaborations across
all influencer marketing campaigns on our platform.</p>

<p>The purpose of this rewrite was to improve our team’s efficiency — speed was the
name of the game. But as the table grew in complexity (more and more
subcomponents for each row, with inputs and date inputs and buttons), it became
more and more slow. Slow to update, slow to reload — just a pain to use.</p>

<p>The solution was to carefully measure the render time of the subcomponents and
of the table as a whole, and then begin experimenting. Over time, we managed to
cut the table render time to a third of what it was.</p>

<p>In this article I’ll take you on a quick tour of React’s performance tools, and
how to eliminate wasted renders.</p>

<p>Let’s get started.</p>

<h3>How To Benchmark A React Component</h3>

<p>We’ll use a simple example: an app that renders a list of 10,000 numbers.</p>

<p>Half the numbers in the list — 1 to 5,000- are simply generated by incrementing.
The other half, in a separate array, are generated by incrementing and then
multiplying by a number stored in the app’s state.</p>

<p>So if the <em>this.state.multiplier</em> is 2, the second array would be 2, 4, 6 … etc
up to 10,000.</p>

<p>To change the multiplier from the default of 1, we click a button.</p>

<p><div><script src='https://gist.github.com/e282df91443f92dc24345c136fd5e225.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import &#39;./App.css&#39;
import ListItem from &#39;./ListItem&#39;

function arrayGenerator(length) {
  return Array.apply(null, { length: length }).map(Number.call, Number)
}

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      multiplier: 1
    }
  }
  
  resetMultiplier() {
    this.setState({ multiplier: 2 })
  }

  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;button onClick={this.resetMultiplier.bind(this)}&gt;Click Me&lt;/button&gt;
        &lt;ul&gt;
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i}/&gt;
            })
          }
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i + this.state.multiplier}/&gt;
            })
          }
        &lt;/ul&gt;
      &lt;/div&gt;
    );
  }
}

export default App
</code></pre></noscript></div>
</p>

<p>When clicking the button, only the second array of ListItems should re-render —
only they are affected by the change. Yet we’re experiencing slowness, so we
want to investigate whether everything is as it should be.</p>

<h3>Measuring Update Time</h3>

<p>We’ll start by installing React’s performance tools.
<code>
npm install --save-dev react-addons-perf
</code>
And then we can import it in our App.js:
<code>javascript
    import Perf from 'react-addons-perf'
</code>
There are four Perf functions that we care about:</p>

<ul>
<li>Perf.start(): start measuring performance.</li>
<li>Perf.stop()</li>
<li>Perf.printExclusive(): prints total rendering time for components.</li>
<li>Perf.printWasted(): prints wasted renders- we’ll get to this shortly.</li>
</ul>


<p>We want to start measuring render time before our component starts updating-
before we call <em>setState()</em>. Then we can stop the measurement and print the
results using the lifecycle method <em>componentDidUpdate()</em>.</p>

<p><div><script src='https://gist.github.com/1d699da138bd651f1993127cc8028b70.js'></script>
<noscript><pre><code>  componentDidUpdate() {
    Perf.stop()
    Perf.printInclusive()
    Perf.printWasted()
  }

  resetMultiplier() {
    Perf.start()
    this.setState({ multiplier: 2 })
  }</code></pre></noscript></div>
</p>

<p>Here’s what our console will look like after clicking the button:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*SxJEEnK8C4sJTdIAnzvmVg.png" alt="" /></p>

<p>Our App renders took 94.75ms to render, and rendered only once.</p>

<p>Our ListItem component took 53.84ms, and rendered 10,000 times (this is
including all instances of the components, not individual render time).</p>

<p>In the second table, we can see ‘wasted’ time — when the component re-rendered
but nothing had actually changed.</p>

<p>We have 5,000 wasted ListItem renders. Not good.</p>

<p>These renders are ‘wasted’ in the sense that only the ListItems affected by the
multiplier will have their render actually changed when we click the button.
There’s no point in having them re-render.</p>

<h3>Fixing Wasted Renders</h3>

<p>Fortunately, React furnishes us with a handy lifecycle method called
<em>shouldComponentUpdate()</em> for these types of situations.</p>

<p>It gives us fine-grained control of when our component will re-render.</p>

<p>We can check for certain conditions, returning a boolean that React uses to
determine whether it will call <em>render()</em> on the component, or leave it as is.</p>

<p>Here’s what it would look like for ListItem:</p>

<p><div><script src='https://gist.github.com/35e739f94d338031acea59c04de42fbd.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;

export default class ListItem extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.text !== this.props.text  
  }

  render() {
    let { text } = this.props
    return &lt;li&gt;{text}&lt;/li&gt;
  }
}</code></pre></noscript></div>
</p>

<p>If the text prop hasn’t changed, there’s no reason to change the component’s
appearance via a re-render.</p>

<p><em>Note that we don’t use the nextState argument in shouldComponentUpdate()- I
left it there for reference.</em></p>

<p>Now let’s re-run our Perf.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*45uzx4SZL67IgaWNGmIM1A.png" alt="" /></p>

<p>We’ve cut our total render time down by 30ms, and eliminated all wasteful
renders.</p>

<h3>Using Perf in the Real World</h3>

<p>Most of the components you’ll be benchmarking won’t be nearly this simple. But
the Perf tools are a valuable way to identify which components are problems.</p>

<p>Here’s an example of <em>Perf.printWasted()</em> from MuseFind’s administrative table
component:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*2Drc_MtkAZexMuuXhBb4Vw.png" alt="" /></p>

<p>These wasted times aren’t long at all, thankfully — but you can see that of the
wasteful renders, the Header component is the main problem, with its
subcomponents Toolbar and PopoverMenu accounting for almost all of the wasted
render time.</p>

<p>Those two components are prime candidates for adding <em>shouldComponentUpdate()</em>.</p>

<h3>Bonus: Benchmarking Initial Renders</h3>

<p>Sometimes you want to not just benchmark when the component updates, but also
how long it takes to render completely the first time around.</p>

<p>In short, we want to measure the time between <em>componentWillMount() </em>and
<em>componentDidMount().</em></p>

<p><em>Perf.start()</em> can’t be placed in the <em>componentWillMount(), </em>however, so we’ll
have to be a little more manual.</p>

<p><div><script src='https://gist.github.com/4f4889a9c600ce31d6f48e2304d5f033.js'></script>
<noscript><pre><code>  componentWillMount() {
    window.performance.mark(&#39;App&#39;)
  }

  componentDidMount() {
    console.log(window.performance.now(&#39;App&#39;))
  }</code></pre></noscript></div>
</p>

<p>This will give you a logged out time in milliseconds- not as fancy as Perf, but
a useful metric for how long it takes to boot up your app.</p>

<h3>Final Notes</h3>

<p>As the docs page <a href="https://facebook.github.io/react/docs/perf.html">proudly
proclaims</a>, React is fast as it
is.</p>

<p>However, that doesn’t mean it’s free from performance slowdowns caused by
unnecessary re-renders — especially in complex apps with hundreds of children.</p>

<p>Using Perf on high-level components can give you an idea of which children are
the problem, so you can keep your app quick and snappy.</p>

<p>I hope this article has been useful — if it has, let me know by hitting the
green heart below.</p>

<p>If you have any questions or feedback, let me know in the comments — thanks for
reading.</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>

<p>Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter — subscribe through the above link.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-08-11T17:34:29-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Your Rails App Real-time—in Under Ten Minutes]]></title>
    <link href="http://scottdomes.com/blog/make-your-rails-app-real-time-in-under-ten-minutes/"/>
    <updated>2017-08-11T16:54:22-07:00</updated>
    <id>http://scottdomes.com/blog/make-your-rails-app-real-time-in-under-ten-minutes</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five ES6 Features to Make Your Life Easier]]></title>
    <link href="http://scottdomes.com/blog/five-es6-features-to-make-your-life-easier/"/>
    <updated>2017-08-11T16:54:13-07:00</updated>
    <id>http://scottdomes.com/blog/five-es6-features-to-make-your-life-easier</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your First Progressive Web App With React]]></title>
    <link href="http://scottdomes.com/blog/build-your-first-progressive-web-app-with-react/"/>
    <updated>2017-08-11T16:54:01-07:00</updated>
    <id>http://scottdomes.com/blog/build-your-first-progressive-web-app-with-react</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Lifecycle Methods- How and When to Use Them]]></title>
    <link href="http://scottdomes.com/blog/react-lifecycle-methods-how-and-when-to-use-them/"/>
    <updated>2017-08-11T16:53:51-07:00</updated>
    <id>http://scottdomes.com/blog/react-lifecycle-methods-how-and-when-to-use-them</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Compared the 3 Best Image Analysis API’s — here’s What We Learned]]></title>
    <link href="http://scottdomes.com/blog/we-compared-the-3-best-image-analysis-apis-heres-what-we-learned/"/>
    <updated>2017-08-11T16:53:44-07:00</updated>
    <id>http://scottdomes.com/blog/we-compared-the-3-best-image-analysis-apis-heres-what-we-learned</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even More About How Flexbox Works — explained in Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/even-more-about-how-flexbox-works-explained-in-animated-gifs/"/>
    <updated>2017-08-11T16:53:33-07:00</updated>
    <id>http://scottdomes.com/blog/even-more-about-how-flexbox-works-explained-in-animated-gifs</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Flexbox Works — Explained With Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs/"/>
    <updated>2017-08-11T16:52:52-07:00</updated>
    <id>http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Best Practices for Writing React Components]]></title>
    <link href="http://scottdomes.com/blog/our-best-practices-for-writing-react-components/"/>
    <updated>2017-08-11T16:51:15-07:00</updated>
    <id>http://scottdomes.com/blog/our-best-practices-for-writing-react-components</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Django API in Under 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes/"/>
    <updated>2017-08-11T16:51:01-07:00</updated>
    <id>http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes</id>
    <content type="html"><![CDATA[<p>Django is by far the most popular Python framework, designed to provide
Rails-like ease of use. Let’s see how quickly we can set up a simple API using
Django and a library called TastyPie.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*cGZQTle3SrxD9STT9LuuMQ.png" alt="" /></p>

<!--more-->


<p>For those of you who read the <a href="https://medium.com/@scottdomes/building-a-simple-node-js-api-in-under-30-minutes-a07ea9e390d2#.mov6a516k">Node API
tutorial</a>,
we’re now going to attempt to do the same thing with Django. We’ll also very
quickly see how Django makes some things harder, and some things much much
easier.</p>

<p><strong>Who This Tutorial Is For</strong>: You should have a basic understanding of REST APIs
and CRUD operations. Python knowledge is a plus but not necessary. You’ll pick
it up.</p>

<p>We’ll be building an API for a Google Keep-esque note-taking web app. We want to
build a REST-ful API with the CRUD endpoints, to create, read, update, and
delete notes. The good news is that rather than approach these endpoints
individually, Django lets us more or less create them all in one fell swoop.</p>

<h3><strong>Setting Up Our Project</strong></h3>

<p>Django divides your work into projects and apps. Projects contain apps, but apps
do not necessarily belong to a certain project — the idea is to make them
reusable across projects.</p>

<p>We’ll only be making one app within one project, but the file structure may seem
a little odd if you don’t keep this in mind.</p>

<p><a href="https://www.python.org/downloads/">Install Python</a> if you haven’t done so, then
let’s install Django and create our project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install Django
</span><span class='line'>django-admin startproject notable_django
</span><span class='line'>cd notable_django</span></code></pre></td></tr></table></div></figure>


<p>Next we’ll install
<a href="https://github.com/django-tastypie/django-tastypie">TastyPie</a>, which will
supply us with a REST framework.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install django-tastypie</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can start our app within our project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python manage.py startapp api</span></code></pre></td></tr></table></div></figure>


<p>Within your notable_django directory, you should now have two subfolders: one
also called notable_django, and another named api (as well as a manage.py file).</p>

<p>The distinction between the two can be thought of like this: the notable_django
contains the settings for the configuration of the project, as well as exposing
URLs. The api folder handles the actual API magic.</p>

<p>Before we go on, we have to install our app within our project, inside
notable_django/settings-py:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># notable_django/settings.py</span>
</span><span class='line'>
</span><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, our project can have multiple apps installed — and those apps aren’t
necessarily tied to that project. Our project here is notable_django, and our
app is called api.</p>

<p>With that done, we’re ready to start building.</p>

<h3>A Model Start</h3>

<p>The first thing we need to create is a Note model to interact with.</p>

<p>For those unfamiliar with models, <a href="https://docs.djangoproject.com/en/1.10/topics/db/models/">this
description</a> from the
Django docs is as good as any:</p>

<blockquote><p>A model is the single, definitive source of information about your data. It
contains the essential fields and behaviors of the data you’re storing.
Generally, each model maps to a single database table.</p></blockquote>

<p>Django is unique (compared to a framework like Ruby on Rails) in that your
migrations follow how you define your models, rather than being separately
defined.</p>

<p>We’re going to create our Note model, and then run our migrations, which will
set up our database with a notes table (with all the appropriate fields).</p>

<p>Let’s create our model, in api/models.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We define our fields, along with the type of each.</p>

<p>The next thing we want to do is add a <strong>str</strong> method to the model. This method
defines what we get when we ask for a particular instance of a model.</p>

<p>For example, this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>… means that when we grab any Note model, we’ll get back only the title. This
just keeps things clean. (We will only be interacting with our models in this
manner through the Python shell, so it’s not super necessary, but good to be
aware of).</p>

<p>Let’s expand our <strong>str</strong> method to also include the body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># api/models.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Note</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, our model is all set up. Now to run our migrations, which will set up our
database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span>
</span><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s go ahead and populate our database with a single note, to make sure all is
well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">shell</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">note</span> <span class="o">=</span> <span class="n">Note</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&quot;First Note&quot;</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&quot;This is certainly noteworthy&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">note</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">QuerySet</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">Note</span><span class="p">:</span> <span class="n">First</span> <span class="n">Note</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">certainly</span> <span class="n">noteworthy</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create our note, save it, then retrieve all notes. You can see our <strong>str</strong>
method at work, returning both the title and the body.</p>

<p>(If you want to learn more about the Note.objects manager, <a href="https://docs.djangoproject.com/en/1.10/topics/db/managers/#django.db.models.Manager">see
here</a>).</p>

<h3>API-ification</h3>

<p>Okay, so our model and database are all ready to go. Now to expose some
endpoints to the wider world, so we can interact with our data.</p>

<p>One of the basics of RESTful APIs is the idea of resources. The term is rather
abstract, but in this context it refers to a class that sits between our URLs
and our models.</p>

<p>A user will make a request to an endpoint. Depending on the URL, the user will
be redirected to a particular resource, which will then perform the appropriate
CRUD action on the model.</p>

<p>Again, this is a simplified explanation of a complex topic — let’s go ahead and
see it in practice:</p>

<p>In your api folder, create a new file called <em>resources.py.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># api/resources.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We import our model, and create a resource from it. The <em>queryset</em> (what models
the resource is concerned with) is all note objects.</p>

<p>We also name the resource appropriately: ‘note’. This will be important for
URLs.</p>

<p>Speaking of which, let’s set those up in our notable_django/urls.py file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We import our NoteResource, instantiate it, and then say that we want all URLs
that start with api/ to redirect to the resource. (Don’t forget to import
<em>include </em>from django.conf.urls).</p>

<h3>Testing Our API</h3>

<p>Finally, we can get running. As in the Node tutorial, we’re going to use Postman
to make API requests. You can get it <a href="https://www.getpostman.com/">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">runserver</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in Postman, let’s send a GET request to this URL:
<a href="http://localhost:8000/api/note/1">http://localhost:8000/api/note/1</a></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*8Paypbwf_k8z-csMl2xpVw.png" alt="" /></p>

<p>Great! Our GET endpoint is working perfectly. Easy.</p>

<p>Now let’s try to create a new note from Postman.</p>

<h3>POST, PUT, DELETE</h3>

<p>We’re going to send a raw JSON object as our new note, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*bbtveT-w_9ji_nfjz9-pMA.png" alt="" /></p>

<p>Make sure you select JSON from the orange dropdown there! This will set a
Content-Type header (which you can view under the Headers tab).</p>

<p>Also make sure you send the request to
<a href="http://localhost:8000/api/note/1">http://localhost:8000/api/note</a>/, not
<a href="http://localhost:8000/api/note/1">http://localhost:8000/api/note</a>. That
trailing slash is important, since otherwise Django has to redirect you, losing
the POST data.</p>

<p>Send that request and… it fails. We get back a 401, AKA Unauthorized.</p>

<p>TastyPie is protective of its models out of the box, and only allows reading,
not modifying, the data.</p>

<p>It’s an easy fix, though — import their basic Authorization class, and add it to
our resource.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># api/resources.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.authorization</span> <span class="kn">import</span> <span class="n">Authorization</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span><span class='line'>        <span class="n">authorization</span> <span class="o">=</span> <span class="n">Authorization</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it works! Try the request, and we get back 201, AKA success!</p>

<p>To double check, you can send a GET request to
<a href="http://localhost:8000/api/note/1">http://localhost:8000/api/note</a>. You should
get back both notes.</p>

<p>Important warning: the Authorization class with TastyPie is, in their words,
great for development — but not suitable for actual deployment. You can dive
deeper into TastyPie authorization
<a href="http://django-tastypie.readthedocs.io/en/latest/authorization.html">here</a>.</p>

<h3>All the Endpoints</h3>

<p>Okay, so we finished our GET and POST endpoints. What about PUT and DELETE?</p>

<p>Well, the magic of TastyPie is that they’re already done. Try updating or
deleting your first note by ending PUT or DELETE to
<a href="http://localhost:8000/api/note/1/">http://localhost:8000/api/note/1/</a>. It just
works!</p>

<p>Just like that, we created a working RESTful API.</p>

<h3>Limiting Fields</h3>

<p>If you wanted to only send specific information about a resource, you can limit
fields like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">tastypie.resources</span> <span class="kn">import</span> <span class="n">ModelResource</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">api.models</span> <span class="kn">import</span> <span class="n">Note</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tastypie.authorization</span> <span class="kn">import</span> <span class="n">Authorization</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NoteResource</span><span class="p">(</span><span class="n">ModelResource</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">queryset</span> <span class="o">=</span> <span class="n">Note</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resource_name</span> <span class="o">=</span> <span class="s">&#39;note&#39;</span>
</span><span class='line'>        <span class="n">authorization</span> <span class="o">=</span> <span class="n">Authorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;body&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you won’t see our created_at field in any requests.</p>

<h3>Final Notes</h3>

<p>Thanks for reading. If this tutorial has been helpful, please share it with your friends and fellow devs.</p>

<p>You can also follow me for more tutorials and guides. And, as always, please
leave any feedback or questions in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Node.js API in Under 30 Minutes]]></title>
    <link href="http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes/"/>
    <updated>2017-08-11T16:50:51-07:00</updated>
    <id>http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes</id>
    <content type="html"><![CDATA[<p>Node.js can be intimidating to beginners. But its flexible structure and lack of
strict guidelines makes it seem more complicated than it is.</p>

<p>This tutorial is a quick and simple guide to Node.js, the Express framework, and
MongoDB, focusing on the fundamental REST routes and basic database interaction.
You’ll build a simple API boilerplate that can then be used as the foundation
for any app.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*s5LVdcugM62xzSvGUpTLWA.png" alt="" /></p>

<!--more-->


<p><strong>Who This Tutorial Is For</strong>: You should have a basic understanding of REST APIs
and CRUD operations, plus basic JavaScript knowledge. I use ES6 (mainly
fat-arrow functions), but nothing too complex.</p>

<p>For this tutorial, you’ll create the skeleton of a back-end for a note-taking
application — think <a href="http://keep.google.com/">Google Keep</a>. You want to be able
to do all four CRUD actions on your notes: create, read, update, and delete.</p>

<h3>Setting Up</h3>

<p>If you don’t have Node installed, <a href="https://howtonode.org/how-to-install-nodejs">see
here</a>.</p>

<p>In a new directory, run npm init, and follow along with the prompts, giving your
app the name of ‘notable’ (or whatever else you might like).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm init</span></code></pre></td></tr></table></div></figure>


<p>Once that’s done, you should have a <em>package.json </em>ready to go in your
directory. This means you can start installing the dependencies you need for
your project.</p>

<p>You’re going to use Express as your framework, MongoDB as the database, and a
package called body-parser to help deal with JSON requests.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save express mongodb body-parser</span></code></pre></td></tr></table></div></figure>


<p>I also highly recommend installing Nodemon as a dev dependency. It’s a simple
little package that automatically restarts your server when files change.</p>

<p>If you run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save-dev nodemon</span></code></pre></td></tr></table></div></figure>


<p>You can then add the following script to <em>package.json</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// package.json</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;dev&quot;</span><span class="o">:</span> <span class="s2">&quot;nodemon server.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your complete <em>package.json</em> should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// package.json</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;notable&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;server.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;dev&quot;</span><span class="o">:</span> <span class="s2">&quot;nodemon server.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;ISC&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;body-parser&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.15.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;express&quot;</span><span class="o">:</span> <span class="s2">&quot;^4.14.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mongodb&quot;</span><span class="o">:</span> <span class="s2">&quot;^2.2.16&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;nodemon&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.11.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can create your <em>server.js </em>file<em> </em>and start building your API.</p>

<h3>Our Server</h3>

<p>Let’s start by requiring all your dependencies in <em>server.js.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">express</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">MongoClient</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">MongoClient</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bodyParser</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span>            <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You’re going to use the MongoClient to interact with your database. Note that
you also initialize your app as an instance of Express, your framework.</p>

<p>The last thing you need to do to get your server up and running is to tell your
app to start <em>listening </em>for HTTP requests.</p>

<p>You can specify a port, and start the listening like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;We are live on &#39;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you run <em>npm run dev </em>(or <em>node server.js</em> if you didn’t install Nodemon)
you should see ‘We are live on port 8000’ in the terminal.</p>

<p>Your server is live. But it doesn’t do a whole lot. Or anything, really.</p>

<p>Let’s fix that.</p>

<h3>CRUDdy Routes</h3>

<p>For this example, you want to build 4 routes; to CREATE a note, to READ your
notes, to UPDATE a note, and to DELETE a note.</p>

<p>This will give you a good idea of how to structure almost any basic route with
Node.</p>

<p>To test your API, though, you need to mimic a client side making requests. To do
so, you’ll use a great app called <a href="https://www.getpostman.com/">Postman</a>. It
allows you to make simple HTTP requests with custom bodies and parameters.</p>

<p>Install Postman, and let’s start setting up your routes.</p>

<h3>Super Organized</h3>

<p>Most Node.js tutorials (and many real apps) put all their routes in one big
<em>routes.js </em>file. This makes me a wee bit uncomfortable.In contrast, splitting
up your files into separate folders leads to good readability, and makes big
apps more manageable.</p>

<p>You don’t have a big app, but let’s do this right. Make the following
directories: an <em>app</em> folder with a routes folder inside it, with an <em>index.js
</em>and a<em> note_routes.js </em>file inside it.</p>

<p>In other words: root > app > routes > index.js and note_routes.js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mkdir</span> <span class="nx">app</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">app</span>
</span><span class='line'><span class="nx">mkdir</span> <span class="nx">routes</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">routes</span>
</span><span class='line'><span class="nx">touch</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">touch</span> <span class="nx">note_routes</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>These directories may seem like overkill for your simple small app, but it’s
always good to start with best practices.</p>

<h3>Your First Route</h3>

<p>Let’s start with the C in CRUD- create. How would you create a note?</p>

<p>Well, before you do that, you have to build a bit more infrastructure. In
Express, routes are wrapped in a function, which takes the Express instance and
a database as arguments.</p>

<p>Like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// routes/note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then export this function through your<em> index.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// routes/index.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">noteRoutes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./note_routes&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">noteRoutes</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Other route groups could go here, in the future</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then import it for use in <em>server.js:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">express</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">MongoClient</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">MongoClient</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bodyParser</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span>            <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;We are live on &#39;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that since you don’t have a database yet set up, you’re just passing in an
empty object.</p>

<p>Okay, <em>now</em> you can make your CREATE route.</p>

<p>The syntax is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the app receives a <em>post </em>request to the ‘/notes’ path, it will execute the
code inside the callback- passing in a request object (which contains the
parameters or JSON of the request) and a response object (used to reply).</p>

<p>You can test this by using Postman to send a POST request to
localhost:8000/notes.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*pqIRP6BQSrVCCc6XVPZxPg.png" alt="" />
You should get the ‘Hello’ back.</p>

<p>Nice! You created your first real route.</p>

<p>Next step is to add some parameters to your request and process them in your API
and, finally, add in your database.</p>

<h3>Request Parameters</h3>

<p>In Postman, go to the Body tab and add some key-value pairs, after selecting the
<em>x-www-form-urlencoded</em> radio button.</p>

<p>This will add encoded form data to your request, which you’ll be able to process
with your API.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*z2mIHYqGFYhSJv0x2_caqg.png" alt="" />
You can try being more creative than me.</p>

<p>Now in your <em>note_routes.js</em>, let’s just log out the body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try sending the Postman request and you’ll see… undefined.</p>

<p>Unfortunately, Express can’t process URL encoded forms on its own. But you did
install that body-parser package…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">express</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">MongoClient</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">MongoClient</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bodyParser</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span>            <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./app/routes&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;We are live on &#39;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you should see the body as an object in the terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;My Note Title&#39;</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;What a great note.&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last step to your preliminary route: set up the database, and then add your data
in.</p>

<p>The easiest way to set up a Mongo database is through <a href="https://mlab.com/">mLab</a>:
it’s free for the smallest size, and quite fast to setup.</p>

<p>Once you create an account and a MongoDB deployment, add a user to the database
with a username and password:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*E5ws9QPkraXVwigcdW86nw.png" alt="" /></p>

<p>then grab the URL here (the second one):</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*kJMlsvyB11W73cO-CioxxA.png" alt="" /></p>

<p>And in a directory config in the root of your project, create a db.js file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mkdir</span> <span class="nx">config</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">config</span>
</span><span class='line'><span class="nx">touch</span> <span class="nx">db</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside, add the URL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:</span> <span class="nx">YOUR</span> <span class="nx">URL</span> <span class="nx">HERE</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don’t forget to add your username and password (the ones from the database user,
not your mLab account) into the URL. (If you’re committing this project to
Github, be sure to include a .gitignore file <a href="https://github.com/scottdomes/notable-node-api-tutorial/blob/master/.gitignore">like
so</a>,
so you don’t share your password with everyone.)</p>

<p>Now in your <em>server.js</em>, you can use the MongoClient to connect to your DB, and
use this to wrap your app setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">express</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">MongoClient</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">MongoClient</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bodyParser</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span>            <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s the last of your infrastructure setup! It’s all route-building from here.</p>

<h3>Adding to your Database</h3>

<p>MongoDB stores data in <em>collections</em>- which are exactly how they sound. In your
case, you want to store your notes in a collection called — you guessed it —
notes.</p>

<p>Since you pass in your database as the <em>db </em>argument in your routes, you can
then access it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a note is as simple as calling <em>insert </em>on your collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the insert is complete (or has failed for whatever reason), you want to
either send back an error or send back the newly created note object. Here’s the
full <em>note_routes.js:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try it out! Send an x-www-form-urlencoded POST request with Postman, with a
<em>title </em>and <em>body </em>set under the Body tab.</p>

<p>The response should look like this:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*YcGwoqOpRkQEo-N0W_-WEA.png" alt="" /></p>

<p>If you log into mLab, you should also see the created note in the database.</p>

<h3>Your READ Route</h3>

<p>Now you can pick up the pace a bit.</p>

<p>Say you wanted to get back the note you just created, by navigating to
localhost:8000/notes/{the id}. In this case, that would be
localhost:8000/notes/585182bd42ac5b07a9755ea3.</p>

<p>(If you don’t have the ID for one of your notes, you can check on mLab or just
create a new one).</p>

<p>Here’s what this would look like in <em>note_routes.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span>
</span><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="s1">&#39;error&#39;</span><span class="o">:</span> <span class="s1">&#39;An error has occurred&#39;</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">ops</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like before, you’re going to call a method on your database collection of
notes. Here, it’s the aptly named findOne.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="s1">&#39;error&#39;</span><span class="o">:</span> <span class="s1">&#39;An error has occurred&#39;</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">ops</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can grab the id from the URL parameters via <em>req.params.id</em>. However, if you
try to just plop in the string into the &lt;> above, it won’t work.</p>

<p>MongoDB requires not just an ID as a <em>string</em>, but as an ID <em>object</em> or, as they
call it, an ObjectID.</p>

<p>Don’t worry, it’s an easy fix. Here’s the full code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">details</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;error&#39;</span><span class="o">:</span><span class="s1">&#39;An error has occurred&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="s1">&#39;error&#39;</span><span class="o">:</span> <span class="s1">&#39;An error has occurred&#39;</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">ops</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try it out with one of your note ID’s, and it should look like this:</p>

<h3>Your DELETE Route</h3>

<p>Deleting an object is actually pretty much the same as finding an object. You
just use the <em>remove</em> function instead of the <em>findOne</em>. Here’s the full code.
I’ve highlighted what’s different from your GET:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">details</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;_id&#39;</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ObjectID</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="nx">details</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;error&#39;</span><span class="o">:</span><span class="s1">&#39;An error has occurred&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Your UPDATE Route</strong></h3>

<p>Last one! The PUT is basically a hybrid between READ and CREATE. You find the
object, then update it accordingly. If you deleted your only note, time to make
another one!</p>

<p>The code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// note_routes.js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;error&#39;</span><span class="o">:</span><span class="s1">&#39;An error has occurred&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">note</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can update any of your notes, like so:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*LZ1DzuxzAJAyNYjO4sZcmg.png" alt="" /></p>

<p>Note the imperfection with this code- if you fail to supply a body or title, the
PUT request will nullify those fields on the note in the database.</p>

<p>You could easily add some conditional logic to update the fields only if they’re
present in the request- I left that out just to keep it simple.</p>

<h3>API Complete</h3>

<p>That’s it! You have a working Node API with each of the four major CRUD
operations.</p>

<p>The goal of this tutorial was to give you a degree of familiarity with Express,
Node, and MongoDB — you can use your simple app as a launching pad for more
complex projects.</p>

<p>In the future I’ll be writing tutorials to create more simple API’s in different
languages and frameworks.</p>

<p>If this tutorial was any help to you, please share it with friends and colleagues- it means
a lot. Feel free to also leave me a comment with any feedback or questions.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Benchmark React Components: The Quick and Dirty Guide]]></title>
    <link href="http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide/"/>
    <updated>2017-08-11T16:50:37-07:00</updated>
    <id>http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide</id>
    <content type="html"><![CDATA[<p>A React Component works hard. As the user manipulates the state of the
application, it may re-render 5, 10, 100 times. Sometimes, that’s a good thing.
But if you don’t understand what is causing the re-renders, and whether they are
necessary, your app could suffer serious slowdown.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*VDZqVFTK09inhHpjKJpXpw.png" alt="" /></p>

<!--more-->


<h3>A Tale of Two Tables</h3>

<p>A few months after I started at MuseFind, we embarked on a rewrite of our
internal software. The key piece in this application was a table that allowed
our customer success team toquickly edit, add, and manage collaborations across
all influencer marketing campaigns on our platform.</p>

<p>The purpose of this rewrite was to improve our team’s efficiency — speed was the
name of the game. But as the table grew in complexity (more and more
subcomponents for each row, with inputs and date inputs and buttons), it became
more and more slow. Slow to update, slow to reload — just a pain to use.</p>

<p>The solution was to carefully measure the render time of the subcomponents and
of the table as a whole, and then begin experimenting. Over time, we managed to
cut the table render time to a third of what it was.</p>

<p>In this article I’ll take you on a quick tour of React’s performance tools, and
how to eliminate wasted renders.</p>

<p>Let’s get started.</p>

<h3>How To Benchmark A React Component</h3>

<p>We’ll use a simple example: an app that renders a list of 10,000 numbers.</p>

<p>Half the numbers in the list — 1 to 5,000- are simply generated by incrementing.
The other half, in a separate array, are generated by incrementing and then
multiplying by a number stored in the app’s state.</p>

<p>So if the <em>this.state.multiplier</em> is 2, the second array would be 2, 4, 6 … etc
up to 10,000.</p>

<p>To change the multiplier from the default of 1, we click a button.</p>

<div><script src='https://gist.github.com/e282df91443f92dc24345c136fd5e225.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import &#39;./App.css&#39;
import ListItem from &#39;./ListItem&#39;

function arrayGenerator(length) {
  return Array.apply(null, { length: length }).map(Number.call, Number)
}

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      multiplier: 1
    }
  }
  
  resetMultiplier() {
    this.setState({ multiplier: 2 })
  }

  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;button onClick={this.resetMultiplier.bind(this)}&gt;Click Me&lt;/button&gt;
        &lt;ul&gt;
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i}/&gt;
            })
          }
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i + this.state.multiplier}/&gt;
            })
          }
        &lt;/ul&gt;
      &lt;/div&gt;
    );
  }
}

export default App
</code></pre></noscript></div>


<p>When clicking the button, only the second array of ListItems should re-render —
only they are affected by the change. Yet we’re experiencing slowness, so we
want to investigate whether everything is as it should be.</p>

<h3>Measuring Update Time</h3>

<p>We’ll start by installing React’s performance tools.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save-dev react-addons-perf</span></code></pre></td></tr></table></div></figure>


<p>And then we can import it in our App.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Perf</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-perf&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are four Perf functions that we care about:</p>

<ul>
<li>Perf.start(): start measuring performance.</li>
<li>Perf.stop()</li>
<li>Perf.printExclusive(): prints total rendering time for components.</li>
<li>Perf.printWasted(): prints wasted renders- we’ll get to this shortly.</li>
</ul>


<p>We want to start measuring render time before our component starts updating-
before we call <em>setState()</em>. Then we can stop the measurement and print the
results using the lifecycle method <em>componentDidUpdate()</em>.</p>

<div><script src='https://gist.github.com/1d699da138bd651f1993127cc8028b70.js'></script>
<noscript><pre><code>  componentDidUpdate() {
    Perf.stop()
    Perf.printInclusive()
    Perf.printWasted()
  }

  resetMultiplier() {
    Perf.start()
    this.setState({ multiplier: 2 })
  }</code></pre></noscript></div>


<p>Here’s what our console will look like after clicking the button:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*SxJEEnK8C4sJTdIAnzvmVg.png" alt="" /></p>

<p>Our App renders took 94.75ms to render, and rendered only once.</p>

<p>Our ListItem component took 53.84ms, and rendered 10,000 times (this is
including all instances of the components, not individual render time).</p>

<p>In the second table, we can see ‘wasted’ time — when the component re-rendered
but nothing had actually changed.</p>

<p>We have 5,000 wasted ListItem renders. Not good.</p>

<p>These renders are ‘wasted’ in the sense that only the ListItems affected by the
multiplier will have their render actually changed when we click the button.
There’s no point in having them re-render.</p>

<h3>Fixing Wasted Renders</h3>

<p>Fortunately, React furnishes us with a handy lifecycle method called
<em>shouldComponentUpdate()</em> for these types of situations.</p>

<p>It gives us fine-grained control of when our component will re-render.</p>

<p>We can check for certain conditions, returning a boolean that React uses to
determine whether it will call <em>render()</em> on the component, or leave it as is.</p>

<p>Here’s what it would look like for ListItem:</p>

<div><script src='https://gist.github.com/35e739f94d338031acea59c04de42fbd.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;

export default class ListItem extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.text !== this.props.text  
  }

  render() {
    let { text } = this.props
    return &lt;li&gt;{text}&lt;/li&gt;
  }
}</code></pre></noscript></div>


<p>If the text prop hasn’t changed, there’s no reason to change the component’s
appearance via a re-render.</p>

<p><em>Note that we don’t use the nextState argument in shouldComponentUpdate()- I
left it there for reference.</em></p>

<p>Now let’s re-run our Perf.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*45uzx4SZL67IgaWNGmIM1A.png" alt="" /></p>

<p>We’ve cut our total render time down by 30ms, and eliminated all wasteful
renders.</p>

<h3>Using Perf in the Real World</h3>

<p>Most of the components you’ll be benchmarking won’t be nearly this simple. But
the Perf tools are a valuable way to identify which components are problems.</p>

<p>Here’s an example of <em>Perf.printWasted()</em> from MuseFind’s administrative table
component:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*2Drc_MtkAZexMuuXhBb4Vw.png" alt="" /></p>

<p>These wasted times aren’t long at all, thankfully — but you can see that of the
wasteful renders, the Header component is the main problem, with its
subcomponents Toolbar and PopoverMenu accounting for almost all of the wasted
render time.</p>

<p>Those two components are prime candidates for adding <em>shouldComponentUpdate()</em>.</p>

<h3>Bonus: Benchmarking Initial Renders</h3>

<p>Sometimes you want to not just benchmark when the component updates, but also
how long it takes to render completely the first time around.</p>

<p>In short, we want to measure the time between <em>componentWillMount() </em>and
<em>componentDidMount().</em></p>

<p><em>Perf.start()</em> can’t be placed in the <em>componentWillMount(), </em>however, so we’ll
have to be a little more manual.</p>

<div><script src='https://gist.github.com/4f4889a9c600ce31d6f48e2304d5f033.js'></script>
<noscript><pre><code>  componentWillMount() {
    window.performance.mark(&#39;App&#39;)
  }

  componentDidMount() {
    console.log(window.performance.now(&#39;App&#39;))
  }</code></pre></noscript></div>


<p>This will give you a logged out time in milliseconds- not as fancy as Perf, but
a useful metric for how long it takes to boot up your app.</p>

<h3>Final Notes</h3>

<p>As the docs page <a href="https://facebook.github.io/react/docs/perf.html">proudly
proclaims</a>, React is fast as it
is.</p>

<p>However, that doesn’t mean it’s free from performance slowdowns caused by
unnecessary re-renders — especially in complex apps with hundreds of children.</p>

<p>Using Perf on high-level components can give you an idea of which children are
the problem, so you can keep your app quick and snappy.</p>

<p>I hope this article has been useful — if it has, let me know by hitting the
green heart below.</p>

<p>If you have any questions or feedback, let me know in the comments — thanks for
reading.</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>

<p>Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter — subscribe through the above link.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With React Native in 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/getting-started-with-react-native-in-20-minutes/"/>
    <updated>2017-08-11T15:58:54-07:00</updated>
    <id>http://scottdomes.com/blog/getting-started-with-react-native-in-20-minutes</id>
    <content type="html"><![CDATA[<p>One of the big selling points of React Native, aside from its technical
abilities, is its emphasis on good DX- Developer Experience. Not as often
discussed as UX, but when it comes down to it, a very important part of
delivering high quality apps quickly and efficiently.</p>

<p>So let’s put React Native’s DX to the test, and see if we can set up a simple
login app, with cookie management, in under 20 minutes.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*5l_gnYCJYe1qAHuba5Aoew.jpeg" alt="" /></p>

<!--more-->


<h3>Our App</h3>

<p>Nearly every type of app you’ll want to build will involve a login screen with
cookies- this app will therefore serve as a perfect foundation for whatever you
want to create.</p>

<p>We’ll also take a tour of the basics of React Native, building basic views and
components and getting familiar with React Native’s baked-in routing solution,
the Navigator.</p>

<p>If you’re familiar with React, you’ll have an easy time reading the code- but by
the end of this tutorial, you should be comfortable enough with React Native’s
structure to move on to more advanced topics.</p>

<h3>The Boring Setup</h3>

<p>You need Node, Watchman, the React CLI, and Xcode. If you’re not on a Mac, look
up alternative instructions
<a href="https://facebook.github.io/react-native/docs/getting-started.html#content">here</a>.
Otherwise, just run the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node
</span><span class='line'>brew install watchman
</span><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<p>And then download Xcode, if you don’t have it: <a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">Mac App
Store</a>. (If you have to
download it, that doesn’t count towards the 20 minutes, okay? Only fair.)</p>

<h3>The Fun Setup</h3>

<p>Cd into the directory you want to keep your app, and let’s create it!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init LoginApp 
</span><span class='line'>cd LoginApp 
</span><span class='line'>react-native run-ios</span></code></pre></td></tr></table></div></figure>


<p>Boom. You should have your iPhone emulator up and running, with your very boring
React Native app loaded up.</p>

<p>On your emulator, hit Cmd + D. This is your developer menu. It does lots of cool
stuff. For now, hit ‘Debug JS Remotely’ (which will launch a tab on your browser
where you can see the console output of your app) and ‘Enable Hot Reloading’.</p>

<p>Now you can open up index.ios.js in your IDE and play around with editing the
text, and watch it change instantly.</p>

<h3>The Views</h3>

<p>For our app we will have two different “pages”- the Login view, and the
Dashboard. The idea is that you can’t see the dashboard unless you log in.</p>

<p>To get between the two different views, we’re going to use a React Native
component called NavigatorIOS. This will take care of our routing, in effect.</p>

<p>Now’s a good time to mention that React Native comes with a whole bunch of
awesome components. You can view the docs for NavigatorIOS, and all the rest,
<a href="https://facebook.github.io/react-native/docs/navigatorios.html">here</a>. Once our
20 minutes are up it’s a good idea to check them out, so you know what you don’t
have to build yourself.</p>

<h3>Initial Route</h3>

<p>Let’s do some basic routing. In the root of your project, create a folder called
App, and then another folder called Views within it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir App
</span><span class='line'>mkdir App/Views</span></code></pre></td></tr></table></div></figure>


<p>Inside, let’s make a file called LoginView.js. Copy and paste the entirety of
index.ios.js into LoginView, then rename the class from LoginApp to LoginView,
and delete the last line.</p>

<p>So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>and delete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;LoginApp&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">LoginApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save it, and we have our first component, which will serve as one of our two
views.</p>

<p>Back in index.ios.js, let’s delete everything within the render function, and
instead replace it with the NavigatorIOS component, which is going to wrap our
entire app and allow us to navigate between views.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>        <span class="nx">initialRoute</span><span class="o">=</span><span class="p"></span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And don’t forget to import the component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">NavigatorIOS</span>  <span class="c1">// &lt;-- Add me!</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you may have noticed, right now we are supplying an empty object to the
initialRoute prop of NavigatorIOS. What we need to do is instead provide an
object with the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">initialRoute</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">component</span><span class="o">:</span> <span class="nx">LoginView</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Copy and paste this declaration to the top of the render function, and then plug
it into the NavigatorIOS. You’ll also need to import the LoginView- here’s our
full <strong>index.ios.js</strong> for reference:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">NavigatorIOS</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;LoginApp&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">LoginApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The app is now wrapped by the NavigatorIOS component, which takes care of
rendering the applicable component for each route. We can build an infinite
number of views and use the navigator to move between them.</p>

<p>Our app should now look… exactly the same. So let’s add another route.</p>

<h3>Second Route</h3>

<p>Create another file in App/Views called <strong>DashboardView.js</strong>. It should look
very familiar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// DashboardView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">welcome</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">I</span><span class="s1">&#39;m the second route!</span>
</span><span class='line'><span class="s1">        &lt;/Text&gt;</span>
</span><span class='line'><span class="s1">      &lt;/View&gt;</span>
</span><span class='line'><span class="s1">    );</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'>
</span><span class='line'><span class="s1">const styles = StyleSheet.create({</span>
</span><span class='line'><span class="s1">  container: {</span>
</span><span class='line'><span class="s1">    flex: 1,</span>
</span><span class='line'><span class="s1">    justifyContent: &#39;</span><span class="nx">center</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">    alignItems: &#39;</span><span class="nx">center</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">    backgroundColor: &#39;</span><span class="err">#</span><span class="nx">F5FCFF</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'><span class="s1">  welcome: {</span>
</span><span class='line'><span class="s1">    fontSize: 20,</span>
</span><span class='line'><span class="s1">    textAlign: &#39;</span><span class="nx">center</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need some way to get from our initial LoginView route to the
DashboardView route. Here’s the thing about NavigatorIOS- every direct child is
automatically passed a <em>navigator</em> prop, which we can use to our advantage.</p>

<p>In <strong>DashboardView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">welcome</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">I</span><span class="err">&#39;</span><span class="nx">m</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">route</span><span class="o">!</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in <strong>LoginView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">instructions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#333333&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now have a working routing system, where the user can switch back and forth
between views. Not much utility yet, but that comes next.</p>

<h3>Logging In</h3>

<p>As you may have noticed, React Native doesn’t use the standard HTML elements
(anchor tags, p’s, div’s, etc) you may be used to. Instead, they use built-in
components like Text and View, which end up functioning largely the same.</p>

<p>We’re going to build our login form using TextInputs (inputs) and
TouchableHighlights (button-like components, which convert a single child into a
clickable element). This should be pretty understandable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">DashboardView</span> <span class="nx">from</span> <span class="s1">&#39;./DashboardView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleGoToDashboard</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">component</span><span class="o">:</span> <span class="nx">DashboardView</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGoToDashboard</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Go</span> <span class="nx">to</span> <span class="nx">Dashboard</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">instructions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#333333&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>React Native styles are a bit different, but that’s beyond the scope of this
tutorial. You can read more
<a href="https://facebook.github.io/react-native/docs/style.html">here</a>.</p>

<p>To register changes to our TextInputs, we’re going to use local component state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">input</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">input</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">Submit</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>onChangeText comes built-in to TextInput and operates much like onChange for an
input, except it provides the changed value as the first argument (instead of an
event).</p>

<p>In a real app, when the user submits the form, we’d send the username and
password to the server, check it out, get a token back, etc etc. We don’t need
to go through that trouble here. Here’s what we’re going to do to simulate the
logging in experience:</p>

<ol>
<li>When the user logs in, a token is created and stored in a cookie.</li>
<li>Once that cookie is present, they are redirected to the dashboard.</li>
<li>From the dashboard, they can logout, which deletes the cookie, and sends them
back to the login.</li>
<li>If they reload the app without logging out, they’ll still have the cookie and be
able to go straight to the dashboard.</li>
</ol>


<p>We’re running out of time, so let’s get going.</p>

<h3>Adding Cookies</h3>

<p>To manage our React Native cookies, we’ll use react-native-cookies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="nx">react</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">cookies</span>
</span><span class='line'><span class="nx">react</span><span class="o">-</span><span class="kr">native</span> <span class="nx">link</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: You may have to rerun the <em>react-native run-ios </em>command after linking.</p>

<p>Linking simply adds the necessary package files into the native code of the
application.</p>

<p>Then, in LoginView, we import it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">CookieManager</span> <span class="nx">from</span> <span class="s1">&#39;react-native-cookies&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And add a way to submit the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">Submit</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And do the magic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">handleSubmitLogin</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">username</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setLoginCookie</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setLoginCookie</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">date</span><span class="p">.</span><span class="nx">setDate</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">CookieManager</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;login_cookie&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">domain</span><span class="o">:</span> <span class="s1">&#39;musefind.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">origin</span><span class="o">:</span> <span class="s1">&#39;musefind.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">version</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">expiration</span><span class="o">:</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Cookie set&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">handleGoToDashboard</span><span class="p">()</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We check to make sure they filled out the form, then grab the date a week from
today, and set up our cookie (named after the user for this simple test) with
that date as the expiration.</p>

<p>Now, when you fill out the form and hit submit you should see in your debugger
console ‘Cookie set’, and be redirected to the dashboard.</p>

<p>Great. We set a cookie. Now what?</p>

<h3>Detecting the Cookie</h3>

<p>When the user opens the app, we want to check if they have a cookie set. If they
do, we want to take them straight to the dashboard.</p>

<p>This is exactly the kind of thing that belongs in componentWillMount, right in
our <strong>index.ios.js</strong>. This function will be called when the app is about to
render.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">LoginView</span> <span class="nx">from</span> <span class="s1">&#39;./App/Views/LoginView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">=</span><span class="s1">&#39;nav&#39;</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>        <span class="nx">initialRoute</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use state to store the initialRoute, which means the app will re-render when
it changes.</p>

<p>However, if you test this out- <strong>it won’t work</strong>, even if you have the cookie
set. That’s because NavigatorIOS is rendering with the initialRoute before we
finish checking for the cookie. After that, it no longer cares about the
initialRoute prop.</p>

<p>In other words, once NavigatorIOS is rendered once, it no longer responds to the
initialRoute prop- so changing it does not change the route.</p>

<p>So we need to hold off on rendering the navigator until we’ve decided what route
to pass it. We’ll add another piece of state to let the app know when to render
the navigator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">initialRoute</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">component</span><span class="o">:</span> <span class="nx">LoginView</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">componentWillMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">CookieManager</span><span class="p">.</span><span class="nx">getAll</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">login_cookie</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">initialRoute</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">component</span><span class="o">:</span> <span class="nx">DashboardView</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the cookie hasn’t loaded, we just render an empty View (like an empty div).</p>

<p>Test it out, and you should be taken straight to the DashboardView. Wee!</p>

<h3>Logging Out</h3>

<p>Logging out is real simple. In our <strong>DashboardView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// DashboardView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">LoginView</span> <span class="nx">from</span> <span class="s1">&#39;./LoginView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We clear the cookies, and take them to the login. If you refresh the app with
Cmd + R after doing this, you’ll notice you are no longer taken to the
DashboardView- you’ve been kicked out! But if you login again and refresh, all
is gravy.</p>

<h3>Summing Up</h3>

<p>Our app isn’t much to look at, but in building it we covered a lot of the basic
concepts of React Native. Hopefully you have a good idea of how to go from here-
how to add more Views, built with RN components.</p>

<p>Once you’re comfortable with RN components, the routing, and the debugging,
React Native will feel very similar to building a web app- in many ways, it’s
easier and faster to develop with.</p>

<p>Found this tutorial helpful? Do me a favour and hit the green heart below- much
appreciated.</p>

<p><em>Thanks to </em><a href="https://medium.mybridge.co/@Mybridge">Mybridge</a><em> for including this
article as one of the top ten React.js articles of November. See the full list
</em><a href="https://medium.mybridge.co/react-js-top-10-articles-in-november-b3c378ae8daa#.itu5da1nx">here</a><em>.</em></p>

<ul>
<li><a href="https://engineering.musefind.com/tagged/react-native?source=post">React Native</a></li>
<li><a href="https://engineering.musefind.com/tagged/javascript?source=post">JavaScript</a></li>
<li><a href="https://engineering.musefind.com/tagged/mobile-app-development?source=post">Mobile App
Development</a></li>
<li><a href="https://engineering.musefind.com/tagged/ios-app-development?source=post">iOS App
Development</a></li>
<li><a href="https://engineering.musefind.com/tagged/react?source=post">React</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

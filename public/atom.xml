<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scott Domes | Web Developer]]></title>
  <link href="http://scottdomes.com/atom.xml" rel="self"/>
  <link href="http://scottdomes.com/"/>
  <updated>2017-08-11T16:59:37-07:00</updated>
  <id>http://scottdomes.com/</id>
  <author>
    <name><![CDATA[Scott Domes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Your Rails App Real-time—in Under Ten Minutes]]></title>
    <link href="http://scottdomes.com/blog/make-your-rails-app-real-time-in-under-ten-minutes/"/>
    <updated>2017-08-11T16:54:22-07:00</updated>
    <id>http://scottdomes.com/blog/make-your-rails-app-real-time-in-under-ten-minutes</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five ES6 Features to Make Your Life Easier]]></title>
    <link href="http://scottdomes.com/blog/five-es6-features-to-make-your-life-easier/"/>
    <updated>2017-08-11T16:54:13-07:00</updated>
    <id>http://scottdomes.com/blog/five-es6-features-to-make-your-life-easier</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your First Progressive Web App With React]]></title>
    <link href="http://scottdomes.com/blog/build-your-first-progressive-web-app-with-react/"/>
    <updated>2017-08-11T16:54:01-07:00</updated>
    <id>http://scottdomes.com/blog/build-your-first-progressive-web-app-with-react</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Lifecycle Methods- How and When to Use Them]]></title>
    <link href="http://scottdomes.com/blog/react-lifecycle-methods-how-and-when-to-use-them/"/>
    <updated>2017-08-11T16:53:51-07:00</updated>
    <id>http://scottdomes.com/blog/react-lifecycle-methods-how-and-when-to-use-them</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Compared the 3 Best Image Analysis API’s — here’s What We Learned]]></title>
    <link href="http://scottdomes.com/blog/we-compared-the-3-best-image-analysis-apis-heres-what-we-learned/"/>
    <updated>2017-08-11T16:53:44-07:00</updated>
    <id>http://scottdomes.com/blog/we-compared-the-3-best-image-analysis-apis-heres-what-we-learned</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even More About How Flexbox Works — explained in Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/even-more-about-how-flexbox-works-explained-in-animated-gifs/"/>
    <updated>2017-08-11T16:53:33-07:00</updated>
    <id>http://scottdomes.com/blog/even-more-about-how-flexbox-works-explained-in-animated-gifs</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Flexbox Works — Explained With Animated Gifs]]></title>
    <link href="http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs/"/>
    <updated>2017-08-11T16:52:52-07:00</updated>
    <id>http://scottdomes.com/blog/how-flexbox-works-explained-with-animated-gifs</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Best Practices for Writing React Components]]></title>
    <link href="http://scottdomes.com/blog/our-best-practices-for-writing-react-components/"/>
    <updated>2017-08-11T16:51:15-07:00</updated>
    <id>http://scottdomes.com/blog/our-best-practices-for-writing-react-components</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Django API in Under 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes/"/>
    <updated>2017-08-11T16:51:01-07:00</updated>
    <id>http://scottdomes.com/blog/create-a-django-api-in-under-20-minutes</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Node.js API in Under 30 Minutes]]></title>
    <link href="http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes/"/>
    <updated>2017-08-11T16:50:51-07:00</updated>
    <id>http://scottdomes.com/blog/build-a-node-dot-js-api-in-under-30-minutes</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Benchmark React Components: The Quick and Dirty Guide]]></title>
    <link href="http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide/"/>
    <updated>2017-08-11T16:50:37-07:00</updated>
    <id>http://scottdomes.com/blog/how-to-benchmark-react-components-the-quick-and-dirty-guide</id>
    <content type="html"><![CDATA[<p>A React Component works hard. As the user manipulates the state of the
application, it may re-render 5, 10, 100 times. Sometimes, that’s a good thing.
But if you don’t understand what is causing the re-renders, and whether they are
necessary, your app could suffer serious slowdown.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*VDZqVFTK09inhHpjKJpXpw.png" alt="" /></p>

<!--more-->


<h3>A Tale of Two Tables</h3>

<p>A few months after I started at MuseFind, we embarked on a rewrite of our
internal software. The key piece in this application was a table that allowed
our customer success team toquickly edit, add, and manage collaborations across
all influencer marketing campaigns on our platform.</p>

<p>The purpose of this rewrite was to improve our team’s efficiency — speed was the
name of the game. But as the table grew in complexity (more and more
subcomponents for each row, with inputs and date inputs and buttons), it became
more and more slow. Slow to update, slow to reload — just a pain to use.</p>

<p>The solution was to carefully measure the render time of the subcomponents and
of the table as a whole, and then begin experimenting. Over time, we managed to
cut the table render time to a third of what it was.</p>

<p>In this article I’ll take you on a quick tour of React’s performance tools, and
how to eliminate wasted renders.</p>

<p>Let’s get started.</p>

<h3>How To Benchmark A React Component</h3>

<p>We’ll use a simple example: an app that renders a list of 10,000 numbers.</p>

<p>Half the numbers in the list — 1 to 5,000- are simply generated by incrementing.
The other half, in a separate array, are generated by incrementing and then
multiplying by a number stored in the app’s state.</p>

<p>So if the <em>this.state.multiplier</em> is 2, the second array would be 2, 4, 6 … etc
up to 10,000.</p>

<p>To change the multiplier from the default of 1, we click a button.</p>

<div><script src='https://gist.github.com/e282df91443f92dc24345c136fd5e225.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;
import &#39;./App.css&#39;
import ListItem from &#39;./ListItem&#39;

function arrayGenerator(length) {
  return Array.apply(null, { length: length }).map(Number.call, Number)
}

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      multiplier: 1
    }
  }
  
  resetMultiplier() {
    this.setState({ multiplier: 2 })
  }

  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;button onClick={this.resetMultiplier.bind(this)}&gt;Click Me&lt;/button&gt;
        &lt;ul&gt;
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i}/&gt;
            })
          }
          {
            arrayGenerator(5000).map(i =&gt; {
              return &lt;ListItem key={i} text={i + this.state.multiplier}/&gt;
            })
          }
        &lt;/ul&gt;
      &lt;/div&gt;
    );
  }
}

export default App
</code></pre></noscript></div>


<p>When clicking the button, only the second array of ListItems should re-render —
only they are affected by the change. Yet we’re experiencing slowness, so we
want to investigate whether everything is as it should be.</p>

<h3>Measuring Update Time</h3>

<p>We’ll start by installing React’s performance tools.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save-dev react-addons-perf</span></code></pre></td></tr></table></div></figure>


<p>And then we can import it in our App.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Perf</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-perf&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are four Perf functions that we care about:</p>

<ul>
<li>Perf.start(): start measuring performance.</li>
<li>Perf.stop()</li>
<li>Perf.printExclusive(): prints total rendering time for components.</li>
<li>Perf.printWasted(): prints wasted renders- we’ll get to this shortly.</li>
</ul>


<p>We want to start measuring render time before our component starts updating-
before we call <em>setState()</em>. Then we can stop the measurement and print the
results using the lifecycle method <em>componentDidUpdate()</em>.</p>

<div><script src='https://gist.github.com/1d699da138bd651f1993127cc8028b70.js'></script>
<noscript><pre><code>  componentDidUpdate() {
    Perf.stop()
    Perf.printInclusive()
    Perf.printWasted()
  }

  resetMultiplier() {
    Perf.start()
    this.setState({ multiplier: 2 })
  }</code></pre></noscript></div>


<p>Here’s what our console will look like after clicking the button:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*SxJEEnK8C4sJTdIAnzvmVg.png" alt="" /></p>

<p>Our App renders took 94.75ms to render, and rendered only once.</p>

<p>Our ListItem component took 53.84ms, and rendered 10,000 times (this is
including all instances of the components, not individual render time).</p>

<p>In the second table, we can see ‘wasted’ time — when the component re-rendered
but nothing had actually changed.</p>

<p>We have 5,000 wasted ListItem renders. Not good.</p>

<p>These renders are ‘wasted’ in the sense that only the ListItems affected by the
multiplier will have their render actually changed when we click the button.
There’s no point in having them re-render.</p>

<h3>Fixing Wasted Renders</h3>

<p>Fortunately, React furnishes us with a handy lifecycle method called
<em>shouldComponentUpdate()</em> for these types of situations.</p>

<p>It gives us fine-grained control of when our component will re-render.</p>

<p>We can check for certain conditions, returning a boolean that React uses to
determine whether it will call <em>render()</em> on the component, or leave it as is.</p>

<p>Here’s what it would look like for ListItem:</p>

<div><script src='https://gist.github.com/35e739f94d338031acea59c04de42fbd.js'></script>
<noscript><pre><code>import React, { Component } from &#39;react&#39;

export default class ListItem extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.text !== this.props.text  
  }

  render() {
    let { text } = this.props
    return &lt;li&gt;{text}&lt;/li&gt;
  }
}</code></pre></noscript></div>


<p>If the text prop hasn’t changed, there’s no reason to change the component’s
appearance via a re-render.</p>

<p><em>Note that we don’t use the nextState argument in shouldComponentUpdate()- I
left it there for reference.</em></p>

<p>Now let’s re-run our Perf.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*45uzx4SZL67IgaWNGmIM1A.png" alt="" /></p>

<p>We’ve cut our total render time down by 30ms, and eliminated all wasteful
renders.</p>

<h3>Using Perf in the Real World</h3>

<p>Most of the components you’ll be benchmarking won’t be nearly this simple. But
the Perf tools are a valuable way to identify which components are problems.</p>

<p>Here’s an example of <em>Perf.printWasted()</em> from MuseFind’s administrative table
component:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*2Drc_MtkAZexMuuXhBb4Vw.png" alt="" /></p>

<p>These wasted times aren’t long at all, thankfully — but you can see that of the
wasteful renders, the Header component is the main problem, with its
subcomponents Toolbar and PopoverMenu accounting for almost all of the wasted
render time.</p>

<p>Those two components are prime candidates for adding <em>shouldComponentUpdate()</em>.</p>

<h3>Bonus: Benchmarking Initial Renders</h3>

<p>Sometimes you want to not just benchmark when the component updates, but also
how long it takes to render completely the first time around.</p>

<p>In short, we want to measure the time between <em>componentWillMount() </em>and
<em>componentDidMount().</em></p>

<p><em>Perf.start()</em> can’t be placed in the <em>componentWillMount(), </em>however, so we’ll
have to be a little more manual.</p>

<div><script src='https://gist.github.com/4f4889a9c600ce31d6f48e2304d5f033.js'></script>
<noscript><pre><code>  componentWillMount() {
    window.performance.mark(&#39;App&#39;)
  }

  componentDidMount() {
    console.log(window.performance.now(&#39;App&#39;))
  }</code></pre></noscript></div>


<p>This will give you a logged out time in milliseconds- not as fancy as Perf, but
a useful metric for how long it takes to boot up your app.</p>

<h3>Final Notes</h3>

<p>As the docs page <a href="https://facebook.github.io/react/docs/perf.html">proudly
proclaims</a>, React is fast as it
is.</p>

<p>However, that doesn’t mean it’s free from performance slowdowns caused by
unnecessary re-renders — especially in complex apps with hundreds of children.</p>

<p>Using Perf on high-level components can give you an idea of which children are
the problem, so you can keep your app quick and snappy.</p>

<p>I hope this article has been useful — if it has, let me know by hitting the
green heart below.</p>

<p>If you have any questions or feedback, let me know in the comments — thanks for
reading.</p>

<p><a href="http://pwa-newsletter.com/">http://pwa-newsletter.com/</a></p>

<p>Want to stay up to date/learn best practices for the future of web development?
Say hello to Progressive Web App Newsletter — subscribe through the above link.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With React Native in 20 Minutes]]></title>
    <link href="http://scottdomes.com/blog/getting-started-with-react-native-in-20-minutes/"/>
    <updated>2017-08-11T15:58:54-07:00</updated>
    <id>http://scottdomes.com/blog/getting-started-with-react-native-in-20-minutes</id>
    <content type="html"><![CDATA[<p>One of the big selling points of React Native, aside from its technical
abilities, is its emphasis on good DX- Developer Experience. Not as often
discussed as UX, but when it comes down to it, a very important part of
delivering high quality apps quickly and efficiently.</p>

<p>So let’s put React Native’s DX to the test, and see if we can set up a simple
login app, with cookie management, in under 20 minutes.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*5l_gnYCJYe1qAHuba5Aoew.jpeg" alt="" /></p>

<!--more-->


<h3>Our App</h3>

<p>Nearly every type of app you’ll want to build will involve a login screen with
cookies- this app will therefore serve as a perfect foundation for whatever you
want to create.</p>

<p>We’ll also take a tour of the basics of React Native, building basic views and
components and getting familiar with React Native’s baked-in routing solution,
the Navigator.</p>

<p>If you’re familiar with React, you’ll have an easy time reading the code- but by
the end of this tutorial, you should be comfortable enough with React Native’s
structure to move on to more advanced topics.</p>

<h3>The Boring Setup</h3>

<p>You need Node, Watchman, the React CLI, and Xcode. If you’re not on a Mac, look
up alternative instructions
<a href="https://facebook.github.io/react-native/docs/getting-started.html#content">here</a>.
Otherwise, just run the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node
</span><span class='line'>brew install watchman
</span><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<p>And then download Xcode, if you don’t have it: <a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">Mac App
Store</a>. (If you have to
download it, that doesn’t count towards the 20 minutes, okay? Only fair.)</p>

<h3>The Fun Setup</h3>

<p>Cd into the directory you want to keep your app, and let’s create it!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init LoginApp 
</span><span class='line'>cd LoginApp 
</span><span class='line'>react-native run-ios</span></code></pre></td></tr></table></div></figure>


<p>Boom. You should have your iPhone emulator up and running, with your very boring
React Native app loaded up.</p>

<p>On your emulator, hit Cmd + D. This is your developer menu. It does lots of cool
stuff. For now, hit ‘Debug JS Remotely’ (which will launch a tab on your browser
where you can see the console output of your app) and ‘Enable Hot Reloading’.</p>

<p>Now you can open up index.ios.js in your IDE and play around with editing the
text, and watch it change instantly.</p>

<h3>The Views</h3>

<p>For our app we will have two different “pages”- the Login view, and the
Dashboard. The idea is that you can’t see the dashboard unless you log in.</p>

<p>To get between the two different views, we’re going to use a React Native
component called NavigatorIOS. This will take care of our routing, in effect.</p>

<p>Now’s a good time to mention that React Native comes with a whole bunch of
awesome components. You can view the docs for NavigatorIOS, and all the rest,
<a href="https://facebook.github.io/react-native/docs/navigatorios.html">here</a>. Once our
20 minutes are up it’s a good idea to check them out, so you know what you don’t
have to build yourself.</p>

<h3>Initial Route</h3>

<p>Let’s do some basic routing. In the root of your project, create a folder called
App, and then another folder called Views within it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir App
</span><span class='line'>mkdir App/Views</span></code></pre></td></tr></table></div></figure>


<p>Inside, let’s make a file called LoginView.js. Copy and paste the entirety of
index.ios.js into LoginView, then rename the class from LoginApp to LoginView,
and delete the last line.</p>

<p>So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>and delete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;LoginApp&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">LoginApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save it, and we have our first component, which will serve as one of our two
views.</p>

<p>Back in index.ios.js, let’s delete everything within the render function, and
instead replace it with the NavigatorIOS component, which is going to wrap our
entire app and allow us to navigate between views.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>        <span class="nx">initialRoute</span><span class="o">=</span><span class="p"></span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And don’t forget to import the component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">NavigatorIOS</span>  <span class="c1">// &lt;-- Add me!</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you may have noticed, right now we are supplying an empty object to the
initialRoute prop of NavigatorIOS. What we need to do is instead provide an
object with the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">initialRoute</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">component</span><span class="o">:</span> <span class="nx">LoginView</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Copy and paste this declaration to the top of the render function, and then plug
it into the NavigatorIOS. You’ll also need to import the LoginView- here’s our
full <strong>index.ios.js</strong> for reference:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">NavigatorIOS</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;LoginApp&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">LoginApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The app is now wrapped by the NavigatorIOS component, which takes care of
rendering the applicable component for each route. We can build an infinite
number of views and use the navigator to move between them.</p>

<p>Our app should now look… exactly the same. So let’s add another route.</p>

<h3>Second Route</h3>

<p>Create another file in App/Views called <strong>DashboardView.js</strong>. It should look
very familiar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// DashboardView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">welcome</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">I</span><span class="s1">&#39;m the second route!</span>
</span><span class='line'><span class="s1">        &lt;/Text&gt;</span>
</span><span class='line'><span class="s1">      &lt;/View&gt;</span>
</span><span class='line'><span class="s1">    );</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'>
</span><span class='line'><span class="s1">const styles = StyleSheet.create({</span>
</span><span class='line'><span class="s1">  container: {</span>
</span><span class='line'><span class="s1">    flex: 1,</span>
</span><span class='line'><span class="s1">    justifyContent: &#39;</span><span class="nx">center</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">    alignItems: &#39;</span><span class="nx">center</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">    backgroundColor: &#39;</span><span class="err">#</span><span class="nx">F5FCFF</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'><span class="s1">  welcome: {</span>
</span><span class='line'><span class="s1">    fontSize: 20,</span>
</span><span class='line'><span class="s1">    textAlign: &#39;</span><span class="nx">center</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need some way to get from our initial LoginView route to the
DashboardView route. Here’s the thing about NavigatorIOS- every direct child is
automatically passed a <em>navigator</em> prop, which we can use to our advantage.</p>

<p>In <strong>DashboardView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">welcome</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">I</span><span class="err">&#39;</span><span class="nx">m</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">route</span><span class="o">!</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in <strong>LoginView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">instructions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#333333&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now have a working routing system, where the user can switch back and forth
between views. Not much utility yet, but that comes next.</p>

<h3>Logging In</h3>

<p>As you may have noticed, React Native doesn’t use the standard HTML elements
(anchor tags, p’s, div’s, etc) you may be used to. Instead, they use built-in
components like Text and View, which end up functioning largely the same.</p>

<p>We’re going to build our login form using TextInputs (inputs) and
TouchableHighlights (button-like components, which convert a single child into a
clickable element). This should be pretty understandable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">DashboardView</span> <span class="nx">from</span> <span class="s1">&#39;./DashboardView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleGoToDashboard</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">component</span><span class="o">:</span> <span class="nx">DashboardView</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGoToDashboard</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Go</span> <span class="nx">to</span> <span class="nx">Dashboard</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">instructions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#333333&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>React Native styles are a bit different, but that’s beyond the scope of this
tutorial. You can read more
<a href="https://facebook.github.io/react-native/docs/style.html">here</a>.</p>

<p>To register changes to our TextInputs, we’re going to use local component state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// LoginView.js</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">input</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">input</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">Submit</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>onChangeText comes built-in to TextInput and operates much like onChange for an
input, except it provides the changed value as the first argument (instead of an
event).</p>

<p>In a real app, when the user submits the form, we’d send the username and
password to the server, check it out, get a token back, etc etc. We don’t need
to go through that trouble here. Here’s what we’re going to do to simulate the
logging in experience:</p>

<ol>
<li>When the user logs in, a token is created and stored in a cookie.</li>
<li>Once that cookie is present, they are redirected to the dashboard.</li>
<li>From the dashboard, they can logout, which deletes the cookie, and sends them
back to the login.</li>
<li>If they reload the app without logging out, they’ll still have the cookie and be
able to go straight to the dashboard.</li>
</ol>


<p>We’re running out of time, so let’s get going.</p>

<h3>Adding Cookies</h3>

<p>To manage our React Native cookies, we’ll use react-native-cookies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="nx">react</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">cookies</span>
</span><span class='line'><span class="nx">react</span><span class="o">-</span><span class="kr">native</span> <span class="nx">link</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: You may have to rerun the <em>react-native run-ios </em>command after linking.</p>

<p>Linking simply adds the necessary package files into the native code of the
application.</p>

<p>Then, in LoginView, we import it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">CookieManager</span> <span class="nx">from</span> <span class="s1">&#39;react-native-cookies&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And add a way to submit the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">Submit</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And do the magic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">handleSubmitLogin</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">username</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setLoginCookie</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setLoginCookie</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">date</span><span class="p">.</span><span class="nx">setDate</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">CookieManager</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;login_cookie&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">domain</span><span class="o">:</span> <span class="s1">&#39;musefind.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">origin</span><span class="o">:</span> <span class="s1">&#39;musefind.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">version</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">expiration</span><span class="o">:</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Cookie set&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">handleGoToDashboard</span><span class="p">()</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We check to make sure they filled out the form, then grab the date a week from
today, and set up our cookie (named after the user for this simple test) with
that date as the expiration.</p>

<p>Now, when you fill out the form and hit submit you should see in your debugger
console ‘Cookie set’, and be redirected to the dashboard.</p>

<p>Great. We set a cookie. Now what?</p>

<h3>Detecting the Cookie</h3>

<p>When the user opens the app, we want to check if they have a cookie set. If they
do, we want to take them straight to the dashboard.</p>

<p>This is exactly the kind of thing that belongs in componentWillMount, right in
our <strong>index.ios.js</strong>. This function will be called when the app is about to
render.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">LoginView</span> <span class="nx">from</span> <span class="s1">&#39;./App/Views/LoginView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">NavigatorIOS</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">=</span><span class="s1">&#39;nav&#39;</span>
</span><span class='line'>        <span class="nx">navigationBarHidden</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">tintColor</span><span class="o">=</span><span class="s1">&#39;#FF6600&#39;</span>
</span><span class='line'>        <span class="nx">initialRoute</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use state to store the initialRoute, which means the app will re-render when
it changes.</p>

<p>However, if you test this out- <strong>it won’t work</strong>, even if you have the cookie
set. That’s because NavigatorIOS is rendering with the initialRoute before we
finish checking for the cookie. After that, it no longer cares about the
initialRoute prop.</p>

<p>In other words, once NavigatorIOS is rendered once, it no longer responds to the
initialRoute prop- so changing it does not change the route.</p>

<p>So we need to hold off on rendering the navigator until we’ve decided what route
to pass it. We’ll add another piece of state to let the app know when to render
the navigator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// index.ios.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">LoginApp</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">initialRoute</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">component</span><span class="o">:</span> <span class="nx">LoginView</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">componentWillMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">CookieManager</span><span class="p">.</span><span class="nx">getAll</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">login_cookie</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">initialRoute</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">component</span><span class="o">:</span> <span class="nx">DashboardView</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the cookie hasn’t loaded, we just render an empty View (like an empty div).</p>

<p>Test it out, and you should be taken straight to the DashboardView. Wee!</p>

<h3>Logging Out</h3>

<p>Logging out is real simple. In our <strong>DashboardView.js:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// DashboardView.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AppRegistry</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Text</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">View</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">LoginView</span> <span class="nx">from</span> <span class="s1">&#39;./LoginView&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">DashboardView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F5FCFF&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">welcome</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We clear the cookies, and take them to the login. If you refresh the app with
Cmd + R after doing this, you’ll notice you are no longer taken to the
DashboardView- you’ve been kicked out! But if you login again and refresh, all
is gravy.</p>

<h3>Summing Up</h3>

<p>Our app isn’t much to look at, but in building it we covered a lot of the basic
concepts of React Native. Hopefully you have a good idea of how to go from here-
how to add more Views, built with RN components.</p>

<p>Once you’re comfortable with RN components, the routing, and the debugging,
React Native will feel very similar to building a web app- in many ways, it’s
easier and faster to develop with.</p>

<p>Found this tutorial helpful? Do me a favour and hit the green heart below- much
appreciated.</p>

<p><em>Thanks to </em><a href="https://medium.mybridge.co/@Mybridge">Mybridge</a><em> for including this
article as one of the top ten React.js articles of November. See the full list
</em><a href="https://medium.mybridge.co/react-js-top-10-articles-in-november-b3c378ae8daa#.itu5da1nx">here</a><em>.</em></p>

<ul>
<li><a href="https://engineering.musefind.com/tagged/react-native?source=post">React Native</a></li>
<li><a href="https://engineering.musefind.com/tagged/javascript?source=post">JavaScript</a></li>
<li><a href="https://engineering.musefind.com/tagged/mobile-app-development?source=post">Mobile App
Development</a></li>
<li><a href="https://engineering.musefind.com/tagged/ios-app-development?source=post">iOS App
Development</a></li>
<li><a href="https://engineering.musefind.com/tagged/react?source=post">React</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
